package {	//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: Sound Imports	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.*;	import flash.events.EventDispatcher;	//•••≈---------------------------------------------------------•••≈||: Sound	import flash.net.URLRequest;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundLoaderContext;	import flash.media.SoundTransform;	//•••≈---------------------------------------------------------•••≈||: Text	import flash.text.TextField;	import flash.text.TextFieldType;	import flash.text.TextFieldAutoSize;	//•••≈---------------------------------------------------------•••≈||: Color	import flash.geom.ColorTransform;	import flash.geom.Transform;	//•••≈---------------------------------------------------------•••≈||: Other Events    import flash.events.MouseEvent;    import flash.errors.IOError;    import flash.events.IOErrorEvent;		import flash.display.Loader;	import flash.net.URLRequest;	import flash.net.URLLoader;		//•••≈---------------------------------------------------------•••≈||: Tweener	import caurina.transitions.Tweener;	//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: SOUND CLASS	public class LoadMP3SubClass extends MovieClip {		//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: SOUND VARS		private var loadedPercentage:uint;		private var nSongCount:int;		private var nSongNodeType:int=2;		private var nSongSubSectionNode:int=0;		//private var nSkinNodeType:int=1;		private var soundIndexNum:int=0;		private var songPosition:int;		private var currSong:Sound;		private var songChannel:SoundChannel=new SoundChannel;		private var volumeLevel:Number = .5;				private var volBarMaskWidth:Number;		private var targetObject:Object;				//•••-----------------------------------•••≈||: Sound FLA MCs		//private var mp3CPanel:MP3_Skin; 		private var targetSoundContainer:MP3_Skin;// = new MP3_Skin();;		//private var mp3PlayerContainer:MovieClip;		private var _targetGallery:MovieClip;		//private var mp3CPanel:MovieClip;		private var oMP3SongName:Object;		private var oMP3ArtistName:Object;				private var mp3CP:MovieClip;		//•••---------------------------------•••≈||: Sound STRING		private var sSoundCaption:String;		private var sSkinPath:String;		private var sSiloImg:String;		//private var sMP3Path:String;		private var tSongName:TextField;		//•••---------------------------------•••≈||: Sound ARRAY		private var aMP3List:Array=new Array();		private var aSongName:Array=new Array();		private var aArtistName:Array=new Array();		private var aDupeList:Array;		private var songSelected:Boolean=false;		//•••---------------------------------•••≈||: Sound BOOLEAN		private var bPlaySoundOff:Boolean;// = true;				private var videoPlaying:Boolean = true;		private var bToggleVideoPausePlay:Boolean;		private var nDuration:Number;		private var infoObject:Object;		private var volumePosition:Number = 1;		private var oMetaClient:Object = new Object();		private var nPercent:Number = 0;		private var bRandomized:Boolean = true;		private var randomSongIndex:int;		//private var randomSongIndex:int;				private var btnVerticalContainerSprite:Sprite;		//•••≈-----------------------------------------------------------------------------•••≈||: Sound Attach AS file		//private var myVideo:VidPlayer;		private var loadMP3ArtistImage:LoadImage2;		private var sColorScheme:String;		private var myColorTheme2:ColorThemes;		//private var shadeColor0:uint;		//•••≈-----------------------------------------------------------------------------•••≈||: Attach MCs from Gallery9.fla		//private var targetSoundContainer:MP3_Skin;				//•••≈-----------------------------------------------------------------------------•••≈||: Sound Strings		//private var sVID_TITLE:String;		//private var sVID_MEDIA:String;		private var sMP3_PATH:String;// = "../NYC_Motorshow2009/Media/MP3/"		private var sMP3IMAGES_PATH:String;		//private var sInitialVideo:String;				private var thisPix:String;				private var sSong:String;		private var sMP3_THUMB:String;		private var aMP3_THUMB:Array;		private var oMP3ArtistPix:Object;					private var mp3BtnHeight:Number;				private var imgFPO:ImageFPO;// = new ImageFPO();;				private var aArtistNameBtn:Array;// = new Array();		private var aSongNameBtn:Array;// = new Array();		private var aSongListNameHiliter:Array;// = new Array();		private var aSongListNameBG:Array;		//•••≈-----------------------------------------------------------------------------•••≈||: LOCAL IMAGE LOADER VARS		private var imageLoader:Loader;		//•••------------------------------------------------------------------•••≈||: PROPERTIES: MOVIECLIPS • OBJECTS				//private var targetObject:Object;				private var targetMC:MovieClip;		//•••------------------------------------------------------------------•••≈||: PROPERTIES: STRING		private var targetURL:String;						private var verticalSlider:MovieClip;				private var initialVolume:Number = .25;				//•••≈-----------------------------------------------------------------------------•••≈||: Sound Booleans		/*private var videoPlayerOn:Boolean = false;		private var bVideoPlayed:Boolean = false;		//•••≈----------------------------------------------------------------------------•••≈||: Sound ARRAY		private var aVideoList:Array;//=new Array();		private var aVideoList2:Array=new Array("LloydAnthonyVid-1.flv", "video2.flv", "video3.flv", "video8.flv", "Hennnelly.flv", "bourne_ultimatum.flv");		private var aVideoSelectBtns:Array;// = new Array();		//•••≈-----------------------------------------------------------------------------•••≈||: Sound Integers/Numbers		private var vidIndexNum:int = 0;		//•••≈-----------------------------------------------------------------------------•••≈||: Sound Main Node		//private var nVideoNodeType:int = 3;		//•••≈----------------------------------------------------------------------------•••≈||: Sound counts (video.length)		//private var nVideoCount:int;*/		//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: VIDEO CONSTRUCTOR		public function LoadMP3SubClass (										 targetSoundContainer:MP3_Skin, 										 sMP3_PATH:String,										 sMP3IMAGES_PATH:String,										 aMP3List:Array, 										 aSongName:Array, 										 aArtistName:Array, 										 imgFPO:ImageFPO,										 aMP3_THUMB:Array,										 aDupeList:Array,										 soundIndexNum:int,										 bRandomized:Boolean,										 randomSongIndex:int,										 sColorScheme:String,										 aArtistNameBtn:Array,										 aSongNameBtn:Array,										 aSongListNameHiliter:Array,										 aSongListNameBG:Array,										 btnVerticalContainerSprite:Sprite,										 verticalSlider:MovieClip										 ) 		{						this.targetSoundContainer = targetSoundContainer;			this.sMP3_PATH = sMP3_PATH;			this.sMP3IMAGES_PATH = sMP3IMAGES_PATH;			this.aMP3List = aMP3List;			this.aSongName = aSongName;			this.aArtistName = aArtistName;			this.imgFPO = imgFPO;			this.aMP3_THUMB = aMP3_THUMB;			this.aDupeList = aDupeList;			this.soundIndexNum = soundIndexNum;			this.bRandomized = bRandomized;			this.randomSongIndex = randomSongIndex;			this.sColorScheme = sColorScheme;			this.aArtistNameBtn = aArtistNameBtn;			this.aSongNameBtn = aSongNameBtn;			this.aSongListNameHiliter = aSongListNameHiliter;			this.aSongListNameBG = aSongListNameBG;			this.btnVerticalContainerSprite = btnVerticalContainerSprite;			this.verticalSlider = verticalSlider;						//currSong=new Sound();						/*this.video = video;			//this.sInitialVideo = sInitialVideo;			this.sVideo = sVideo;			this.sFLV_PATH = sFLV_PATH;			this.aVideoList = aVideoList;			this.myVideoSelectBtn = myVideoSelectBtn;			this.aVideoSelectBtns = aVideoSelectBtns;*/									//this.nVideoNodeType = nVideoNodeType;			//this.nVideoCount = nVideoCount;									//initVideo();			initSoundModule();		}		//•••≈--------------------------------------------------------------------------------------------------------------------------------------------------------•••≈||:		//•••----------------------------------------------------------------•••≈||: CONTROL PANEL FUNCTIONALITY: LOAD SONG		private function initSoundModule():void{			trace("//•••----------------------------------------------------------------•••≈||: start initSoundModule");			/*if(this.bRandomized == true){					randomSongIndex = Math.random()*(this.aMP3List.length-1);//(this.aMP3List.length-1)):Number;					this.soundIndexNum = randomSongIndex;					trace("Randomized song this.soundIndexNum1: " + this.soundIndexNum);			} else {				this.soundIndexNum = 0;			}*/						//this.soundIndexNum = this.randomSongIndex;			//trace("Randomized song this.soundIndexNum1: " + this.soundIndexNum);						/*this.imgFPO = new ImageFPO();			this.targetSoundContainer.artistPix.addChildAt(this.imgFPO, 0);	*/						loadMySong();			//targetSoundContainer.MP3Menu.			this.aDupeList[0].addEventListener (MouseEvent.CLICK, onClickLoadMP3);				//trace("•••--------------------------•••≈||:this.soundIndexNum: " + this.soundIndexNum);			//this.targetSoundContainer.mp3VolumeBar_mc.mp3VolumeMask.width = 82;			volBarMaskWidth = targetSoundContainer.mp3VolumeBar_mc.mp3VolumeMask.width;			//setVolume();			trace("//•••----------------------------------------------------------------•••≈||: end initSoundModule");		}		private function loadMySong():void {			trace("//•••----------------------------------------------------------------•••≈||: start loadMySong");			currSong=new Sound();			currSong.load(new URLRequest(this.sMP3_PATH + this.aMP3List[this.soundIndexNum]));						//trace("•••--------------------------•••≈||:this.aMP3List[this.soundIndexNum]: " + this.aMP3List[this.soundIndexNum]);			//trace("//•••-----------------•••≈||: loadMySong : currSong: " + currSong);			//trace("this.soundIndexNum1: " + this.soundIndexNum);			//trace("this.sMP3_PATH: " + this.sMP3_PATH);			//trace("this.aMP3List[this.soundIndexNum]: " + (this.aMP3List[this.soundIndexNum]));			//trace("this.aDupeList: " + this.aDupeList);						this.targetSoundContainer.playPauseBtn_mc.playBtn_mc.visible = false;						oMP3SongName = this.targetSoundContainer.mp3SongName;			oMP3SongName.text = this.aSongName[this.soundIndexNum];						oMP3ArtistName = this.targetSoundContainer.mp3ArtistName;			oMP3ArtistName.text = this.aArtistName[this.soundIndexNum];						/*var box:MovieClip = new MovieClip();			box = this.aDupeList[this.soundIndexNum].songListNameBG;			trace("box :" + box)*/			//var oMP3ButtonBG:Object = new Object();			//oMP3ButtonBG.box = this.aDupeList[this.soundIndexNum].songListNameBG;			//colorMe(box, 0x00FF33, 1)			//trace("oMP3ButtonBG: " + oMP3ButtonBG)						//oMP3ArtistPix = this.targetSoundContainer.artistPix.imgFPO;			//oMP3ArtistPix = this.aMP3_THUMB[this.soundIndexNum];						//var oThisPix:Object = this.aMP3_THUMB[this.soundIndexNum];						//trace("oThisPix: " + oThisPix);			//trace("oMP3ArtistPix: " + oMP3ArtistPix);			//trace("this.aMP3_THUMB[this.soundIndexNum]: " + (this.aMP3_THUMB[this.soundIndexNum]));			//trace("this.soundIndexNum: " + this.soundIndexNum);			//			/*thisPix = this.aMP3_THUMB[this.soundIndexNum];			trace("thisPix: " + thisPix);			trace("this.imgFPO: " + this.imgFPO);						//this.imgFPO = new ImageFPO();			//this.targetSoundContainer.artistPix.addChild(this.imgFPO);						loadMP3ArtistImage =  new LoadImage2(this.imgFPO, this.sMP3_PATH + thisPix, this.targetSoundContainer.artistPix.loadingAnim);*/			//addEventListener(Event.ACTIVATE, loadMyPix);						/*this.imgFPO = new ImageFPO();			this.targetSoundContainer.artistPix.addChild(this.imgFPO);	*/						loadMyPix();						//imgLoader()						//this.			//var imgeFPO:ImageFPO = new ImageFPO();			//this.targetSoundContainer.artistPix.addChild(imgeFPO);						//loadMP3ArtistImage =  new LoadImage2(this.imgFPO, this.sMP3_PATH + thisPix, this.targetSoundContainer.artistPix.loadingAnim);						//addChild(this.aMP3_THUMB[this.soundIndexNum]);						songChannel=currSong.play(songPosition);			//setVolume();						//this.aDupeList[this.soundIndexNum].songListNameBG.alpha = 1;						//this.targetSoundContainer.MP3Menu.songListNameHiliter.y = this.aDupeList[this.soundIndexNum].y;						/*var transform:SoundTransform = new SoundTransform(volumeLevel, .5);						songChannel.soundTransform = transform;*/			songChannel.addEventListener(Event.SOUND_COMPLETE, soundComplete);			//volBarMaskWidth = targetSoundContainer.mp3VolumeBar_mc.mp3VolumeMask.width;						//•••≈------------------------------------------------•••≈||: Public Function from ColorThemes.as :: Colorize selected button to the lightest from the array.			//this.myColorTheme.getLightestColor(this.aDupeList[this.soundIndexNum]);						//•••≈------------------------------------------------------------•••≈||: Assign color shade from ColorThemes sub-class :::: PUT THESE CODES IN INIT			var shadeIndex1:int = 1;			var shadeIndex2:int = 2;			var shadeIndex3:int = 3;			var shadeIndex4:int = 4;			var shadeIndex5:int = 5;			var shadeIndex6:int = 6;			for (var i:int=0; i < this.aDupeList.length; i++) {				//•••≈--------------------------------------------•••≈||: Assign a color to all mp3 menu buttons text				//colorMe(box, 0x00FF33, .2);				//colorMe(this.aDupeList[i], 0x333333, .8);				//colorMe(this.aArtistName[i], 				myColorTheme2 = new ColorThemes(this.aArtistNameBtn[i], this.sColorScheme, shadeIndex6, 0);				myColorTheme2 = new ColorThemes(this.aSongNameBtn[i], this.sColorScheme, shadeIndex6, 0);				myColorTheme2 = new ColorThemes(this.aSongListNameHiliter[i], this.sColorScheme, shadeIndex1, 0);				myColorTheme2 = new ColorThemes(this.aSongListNameBG[i], this.sColorScheme, shadeIndex5, 0);								//myColorTheme2 = new ColorThemes(this.aSongListNameHiliter[i], this.sColorScheme, shadeIndex3);				this.aArtistNameBtn[i].alpha = .5;				this.aSongListNameHiliter[i].alpha = 0;				this.aSongListNameBG[i].alpha = 0;								//trace("aSongListNameBG[i].height: " + aSongListNameBG[i].height);			}						mp3BtnHeight = aSongListNameBG[0].height;			//trace("mp3BtnHeight :" + mp3BtnHeight);			//•••≈--------------------------------------------•••≈||: Assign a color shade to the selected mp3 menu button text						myColorTheme2 = new ColorThemes(this.aSongNameBtn[this.soundIndexNum], this.sColorScheme, shadeIndex3, 0);			myColorTheme2 = new ColorThemes(this.aArtistNameBtn[this.soundIndexNum], this.sColorScheme, shadeIndex4, 0);			//myColorTheme2 = new ColorThemes(this.aSongListNameHiliter[this.soundIndexNum], this.sColorScheme, shadeIndex1);			this.aArtistNameBtn[this.soundIndexNum].alpha = 1;			this.aSongListNameHiliter[this.soundIndexNum].alpha = 1;			this.aSongListNameBG[this.soundIndexNum].alpha = 0;						//myColorTheme2 = new ColorThemes(this.aDupeList[this.soundIndexNum], this.sColorScheme, shadeIndex);//, shadeColor0);			//myColorTheme2 = new ColorThemes(box, this.sColorScheme, shadeIndex);			//trace("this.aDupeList[this.soundIndexNum].songListNameBG: " + (this.aDupeList[this.soundIndexNum].songListNameBG));						 			//var artistName:MovieClip = new MovieClip();			//artistName = oMP3ArtistName;//this.targetSoundContainer.mp3ArtistName;						//var oTest:Object = new Object();            //oTest.bgColor = 0xFFcc00;			//oTest.name              //oTest.radius = 25;            //oTest.xCenter = 25;			/*var firstCircle:Circle = new Circle(oTest);            addChild(firstCircle);            firstCircle.x = 50;            firstCircle.y = 50;*/						/*trace("artistName: " + artistName);			trace("oMP3ArtistName.text: " + oMP3ArtistName.text);			trace("oMP3ArtistName: " + oMP3ArtistName);*/			//•••----------------------------------------------------------------•••≈||: Setting the vertical position of the selected song.			var songVerticalPosition:Number;// = this.soundIndexNum * this.aDupeList[0].songListNameBG.height;						if(this.aMP3List.length <= 7){				//myMP3VerticalSlider.visible =false;				//btnVerticalContainerSprite.y = - ((34 * 8)/2)								songVerticalPosition = 0;//(mp3BtnHeight * (this.aMP3List.length -1));//0;//100;				trace("songVerticalPosition :" + songVerticalPosition);				//•••----------------------------------------------------------------•••≈||: Hide vertical slider				//this.panelSlider.visible = false;							} else {				//myMP3VerticalSlider.visible = true;				var heightDivider:Number = (this.btnVerticalContainerSprite.height - mp3BtnHeight)/this.verticalSlider.height;				songVerticalPosition = this.soundIndexNum * this.aDupeList[0].songListNameBG.height;				var sliderBtnYPos:int = Math.round(songVerticalPosition / heightDivider);///this.verticalSlider.height);//this.aDupeList[0].songListNameBG.height);				Tweener.addTween (this.verticalSlider.vertSliderButton,{y:sliderBtnYPos, time:2,transition:"easeOutQuad"});								trace("heightDivider :" + heightDivider);								trace("songVerticalPosition :" + songVerticalPosition);								//trace("sliderBtnYPos :" + sliderBtnYPos);				//this.verticalSlider.vertSliderButton.y = sliderBtnYPos							}						//trace("songVerticalPosition: " + songVerticalPosition);			//this.btnVerticalContainerSprite.y = -songVerticalPosition;			Tweener.addTween (this.btnVerticalContainerSprite,{y:-songVerticalPosition, time:2,transition:"easeOutQuad"});			trace("this.verticalSlider.vertSliderButton.y :" + this.verticalSlider.vertSliderButton.y);						trace("//•••----------------------------------------------------------------•••≈||: end loadMySong");		}		public function sliderButtonPosition():void{						/*var btnPos:Number = Math.round((100 * sliderBtn.y/sliderBar.width ))/100;						//•••------------------------------------------------•••≈:| Volume Control			var volumeMask:Number = Math.round((100 * targetObject.mouseX/targetObject.width ))/100;			this.targetSoundContainer.mp3VolumeBar_mc.mp3VolumeMask.width = volBarMaskWidth * volumeMask			volumeLevel = volumeMask;*/		}		//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: Colorized Methods		/*public function colorMe(mc:MovieClip, kolor:uint, alfa:Number):void {			var myColor:ColorTransform = new ColorTransform();			myColor.color = kolor;			mc.transform.colorTransform = myColor;			mc.alpha = alfa;			//mc.alpha = 1;		}*/		public function onClickLoadMP3(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;			//this.soundIndexNum = this.aDupeList.indexOf(e.currentTarget);			//currSong.load(new URLRequest(this.sMP3_PATH + this.aMP3List[this.soundIndexNum]));			//loadMySong();			//trace("onClickLoadMP3");			//trace("this.soundIndexNum: " + this.soundIndexNum);			//trace("this.aDupeList: " + this.aDupeList);		}		public function loadMySound(indx:int):void {			//targetObject = e.currentTarget;			//targetObject.buttonMode = true;			//this.soundIndexNum = this.aDupeList.indexOf(e.currentTarget);			//			//currSong=new Sound();			//currSong.load(new URLRequest(this.sMP3_PATH + this.aMP3List[indx]));			//songChannel=currSong.play(songPosition);			//this.soundIndexNum = indx;			//•••--------------•••≈||: Load My Song			songPosition = 0;			songChannel.stop();			this.soundIndexNum = indx;//this.aDupeList.indexOf(e.currentTarget);			loadMySong()						//loadMySong();			//trace("this.aMP3List[indx]: " + this.aMP3List[indx]);			//trace("this.soundIndexNum: " + this.soundIndexNum);			//trace("this.aDupeList: " + this.aDupeList);		}						/*private function imgLoader():void{			imageLoader = new Loader();			targetURL = this.sMP3_PATH + this.aMP3_THUMB[this.soundIndexNum];			trace("targetURL: " + targetURL);			var urlRekws:URLRequest = new URLRequest(targetURL);//aImgName[i]);			imageLoader.load(urlRekws);			this.targetSoundContainer.artistPix.addChild(imageLoader);		}*/		public function loadMyPix():void{			//targetObject = e.currentTarget;			//targetObject.buttonMode = true;			//this.soundIndexNum = this.aDupeList.indexOf(e.currentTarget);			//trace("this.soundIndexNumLoadPix: " + this.soundIndexNum);			thisPix = this.aMP3_THUMB[this.soundIndexNum];			//trace("thisPix: " + thisPix);						/*this.imgFPO = new ImageFPO();			this.targetSoundContainer.artistPix.addChild(this.imgFPO);			*/						this.imgFPO = new ImageFPO();			//trace("this.imgFPO: " + this.imgFPO);			//this.imgFPO.x = -89;			//this.imgFPO.y = -89;			//this.targetSoundContainer.artistPix.addChildAt(this.imgFPO, 0);							loadMP3ArtistImage =  new LoadImage2(this.imgFPO, this.sMP3IMAGES_PATH + thisPix, this.targetSoundContainer.artistPix.loadingAnim);			this.targetSoundContainer.artistPix.addChild(this.imgFPO);				//trace("this.sMP3IMAGES_PATH: " + this.sMP3IMAGES_PATH);			//trace("thisPix: " + thisPix);						//trace("this.targetSoundContainer.artistPix.numChildren: " + this.targetSoundContainer.artistPix.numChildren); 			cleanImageContainer(this.targetSoundContainer.artistPix)					}				/*public function setSoundIndexNum(thisIndex:int):void{			thisIndex = this.soundIndexNum;			//trace("setSoundIndexNum: " + indx)			//mc[this.soundIndexNum];		}				public function get sndIndexNumbr():int{			return indxNum;		}*/				public function set sndIndexNumbr(indxNum:int):void{			 //this.soundIndexNum = ind;			 this.soundIndexNum = indxNum;		}				//		//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: Clean container		private function cleanImageContainer (imgHolder:MovieClip):void {			if (imgHolder.numChildren > 4) {				imgHolder.removeChildAt (4);			}		}		//•••----------------------------------------------------------------•••≈||: Play Next Song. Randomized or not.		public function playNextSong():void {			/*if (this.soundIndexNum < this.aMP3List.length-1) {				if(this.bRandomized == true){					randomSongIndex = Math.random()*(this.aMP3List.length-1);//(this.aMP3List.length-1)):Number;					this.soundIndexNum = randomSongIndex;					trace("playNextSong this.soundIndexNum: " + this.soundIndexNum);					//this.randomSongIndex = Math.random()*(this.aMP3List.length-1);					trace("Randomized song this.soundIndexNum: " + this.soundIndexNum);				} else {					this.soundIndexNum++;				}				//•••--------------•••≈||: Load My Song				loadMySong();			} else {				this.soundIndexNum = 0;				//•••--------------•••≈||: Load My Song				loadMySong();			}*/			if(this.bRandomized == true){					randomSongIndex = Math.random()*(this.aMP3List.length-1);//(this.aMP3List.length-1)):Number;					this.soundIndexNum = randomSongIndex;										//«•••» this.randomSongIndex = Math.random()*(this.aMP3List.length-1);					trace("Randomized song this.soundIndexNum2: " + this.soundIndexNum);				} else {					this.soundIndexNum++;					trace("playNextSong this.soundIndexNum++: " + this.soundIndexNum);				}				//•••--------------•••≈||: Load My Song				songPosition = 0;				loadMySong();		}		//•••««« ---------------------------------------------------------------- »»»•••≈||: On Sound Complete		public function soundComplete(e:Event):void {//Event //SoundEvent			playNextSong();		}		//•••--------------------------------------------------------------------------------------------------------------------------------------------•••≈||: MP3 LOADING: On Progress		public function onSongProgress(e:ProgressEvent):void {			loadedPercentage=Math.round(100 * e.bytesLoaded / e.bytesTotal);			//trace("The sound is " + loadedPercentage + "% loaded.");		}		//•••--------------------------------------------------------------------------------------------------------------------------------------------•••≈||: MP3 LOADING: On Complete		/*private function onSongComplete(e:Event):void {			//trace("mp3 loaded");			songChannel.stop();			songChannel=currSong.play();		}*/		//•••--------------------------------------------------------------------------------------------------------------------------------------------•••≈||: MP3 LOADING: On Failed		private function onSoundFailed(errorEvent:IOErrorEvent):void {			songChannel=currSong.play();			//infoTextField.text = "The sound could not be loaded: " + errorEvent.text;		}		//•••------------------------------------------------------------------------------------------------------------------------------------------------------------•••≈||: CONTROL PANEL FUNCTIONALITY: PLAY/PAUSE SONG EVENTS		public function onPlayPauseRelease(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;			bPlaySoundOff = !bPlaySoundOff;			togglePlayPauseSound();		}		//•••----------------------------------------------•••≈||: Main function for toggling sound play/pause		public function togglePlayPauseSound():void{			//bPlaySoundOff = !bPlaySoundOff;			//•••----------------------------------------------•••≈||: Current Song Paused			if (bPlaySoundOff == true) {				showPlayBtn();				songPosition = songChannel.position;				songChannel.stop();			} else {				showSoundPauseBtn();				songChannel=currSong.play(songPosition);								setVolume();				/*var transform:SoundTransform = new SoundTransform(volumeLevel, .5);				songChannel.soundTransform = transform;*/								/*var transform:SoundTransform = new SoundTransform(volumeLevel, .5);				songChannel.soundTransform = transform;	*/				//transform.volume = volume;				//set volume = volumeLevel;			}		}		//•••----------------------------------------------•••≈||: Function for pausing sound when video is called. Pause sound when playing and pause sound when paused.		public function pauseSound():void{			songPosition = songChannel.position;			songChannel.stop();			//bPlaySoundOff = true;			/*if (bPlaySoundOff == true) {				//songChannel=currSong.play(songPosition);				songPosition = songChannel.position;				songChannel.stop();			}*/			/*if (bPlaySoundOff == false) {				songChannel=currSong.play(songPosition);			}*/		}		public function resumeSound():void{			//if (bPlaySoundOff == true) {				songChannel.stop();				loadMySong();				//songChannel=currSong.play(songPosition);			//}		}				//		/*private function testing(e:Event):void {			//trace("bPlaySoundOff: " + bPlaySoundOff);			//this.targetSoundContainer.y = (_targetGallery.height/2 - this.targetSoundContainer.height/2)// +50;			this.targetSoundContainer.mp3SongName_mc.mp3SongName.text = this.aSongName[this.soundIndexNum];			//trace("this.soundIndexNum: " + this.soundIndexNum)		}*/		//		public function onPlayPauseOver(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;			targetObject.alpha = .5;		}		public function onPlayPauseOut(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;			targetObject.alpha = 1;		}		//		//		//•••--------------•••≈||: Manually select embedded movieclips within the target conatainer		public function showPlayBtn():void {			bPlaySoundOff = true;			this.targetSoundContainer.playPauseBtn_mc.playBtn_mc.visible = true;			this.targetSoundContainer.playPauseBtn_mc.pauseBtn_mc.visible = false;		}		public function showSoundPauseBtn():void {			bPlaySoundOff = false;			this.targetSoundContainer.playPauseBtn_mc.playBtn_mc.visible = false;			this.targetSoundContainer.playPauseBtn_mc.pauseBtn_mc.visible = true;		}				//•••----------------------------------------------------------------•••≈||: CONTROL PANEL FUNCTIONALITY: PREVIOUS SONG EVENTS		public function onPrevSongRelease(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;						showSoundPauseBtn();						if (this.soundIndexNum > 0) {				this.soundIndexNum--;			} else {				this.soundIndexNum = 0;			}			//•••--------------•••≈||: Load My Song			songPosition = 0;			songChannel.stop();			loadMySong();			//showSongName()		}		public function onPrevSongOver(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;			targetObject.alpha = .5;		}		public function onPrevSongOut(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;			targetObject.alpha = 1;		}		//•••----------------------------------------------------------------•••≈||: CONTROL PANEL FUNCTIONALITY: NEXT SONG EVENTS		public function onNextSongRelease(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;						showSoundPauseBtn();						if (this.soundIndexNum < this.aMP3List.length-1) {				this.soundIndexNum++;			} else {				this.soundIndexNum = 0;			}			//•••--------------•••≈||: Load My Song			songPosition = 0;			songChannel.stop();			loadMySong();			//trace("this.soundIndexNum:MP3SubClass: " + this.soundIndexNum);					}				public function onNextSongOver(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;			targetObject.alpha = .5;		}				public function onNextSongOut(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;			targetObject.alpha = 1;		}		//•••----------------------------------------------------------------•••≈||: CONTROL PANEL FUNCTIONALITY: CLOSE MP3 PLAYER		public function onCloseSongRelease(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;						//•••------------------------------------------------•••≈:| Hide buttons container			Tweener.addTween(this.targetSoundContainer,{y:((this.targetSoundContainer.height + 100)), time:2,transition:"easeOutExpo"});			//hideMP3Player();		}		public function litenCloseButn(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;			targetObject.alpha = .5;		}		public function drkenCloseButn(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;			targetObject.alpha = 1;		}						//		//•••----------------------------------------------------------------•••≈||: CONTROL PANEL FUNCTIONALITY: MP3 VOLUME		public function setVolume(){			var transform:SoundTransform = new SoundTransform(volumeLevel, 0);//initialVolume			songChannel.soundTransform = transform;					}				public function fadeVolume():void{			//var i:int =  volumeLevel;						//Tweener.addTween(volumeLevel,{y:((this.targetSoundContainer.height)), time:2,transition:"easeOutExpo"});		}				public function onVolumeRelease(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;			//•••------------------------------------------------•••≈:| Show buttons container			//Tweener.addTween(_targetGallery,{y:((this.targetSoundContainer.height)), time:2,transition:"easeOutExpo"});			//trace((100 * targetObject.mouseX/targetObject.width ))			//volBarMaskWidth = targetSoundContainer.mp3VolumeBar_mc.mp3VolumeMask.width;						//•••------------------------------------------------•••≈:| Volume Control			var volumeMask:Number = Math.round((100 * targetObject.mouseX/targetObject.width ))/100;			trace("•••-------------------||volumeMask: " + volumeMask);			this.targetSoundContainer.mp3VolumeBar_mc.mp3VolumeMask.width = volumeMask *volBarMaskWidth;//volBarMaskWidth * volumeMask						volumeLevel = volumeMask;						//trace("volumeLevel: " + volumeLevel)								//volBarWidth = Math.round(100 * targetMC.mouseX/targetMC.width)/100				//volBar_mc.barMask.width = volBarMaskWidth * volBarWidth						setVolume();						/*var transform:SoundTransform = new SoundTransform(volumeLevel, .5);			songChannel.soundTransform = transform;			*/		}			}}