package {	import flash.display.MovieClip;	//	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.display.DisplayObject;	//	import flash.display.Graphics;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.net.URLRequest;	import flash.events.ProgressEvent;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.IOErrorEvent;	import flash.events.ErrorEvent;	import flash.errors.IOError;	//•••------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------•••≈||: CLASS	public class LoadImage extends MovieClip {		//•••------------------------------------------------------------------•••≈||: PROPERTIES: LOADERS & BITMAPS		private var imageSiloLoader:Loader;		private var imgBM:Bitmap;				//•••------------------------------------------------------------------•••≈||: PROPERTIES: MOVIECLIPS • OBJECTS				private var targetObject:Object;				private var targetMC:MovieClip;		private var imgBMWidth:Number;		private var imgXPos:Number;		//•••------------------------------------------------------------------•••≈||: PROPERTIES: STRING		private var targetURL:String;				//•••--------------------------------------------------------------------------------------------------------------------------------------------------------------------------•••≈||: CONSTRUCTOR		public function LoadImage(targetMC:MovieClip, targetURL:String){			this.targetMC = targetMC;			this.targetURL = targetURL;			this.imgXPos = imgXPos;			loadMe();					}				//•••------------------------------------------------------------------•••≈||: METHODS		private function loadMe():void{			imageSiloLoader = new Loader();			var urlSiloRekws:URLRequest = new URLRequest(targetURL);//aImgName[i]);			imageSiloLoader.load(urlSiloRekws);			targetMC.addChild(imageSiloLoader);			imageSiloLoader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS,onProgress);			imageSiloLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, OnComplete);			imageSiloLoader.addEventListener(MouseEvent.ROLL_OVER, onOver);		}				private function onProgress(e:ProgressEvent):void {			//trace("LoadImage: onProgress...")		}				private function OnComplete(e:Event):void {						//trace("LoadImage: OnComplete...")			//•••----------------------------------------------------------------•••≈||: New BitmapData: Current Image			imgBM = Bitmap(e.target.content);//e.target.content);			var imgBMData:BitmapData = imgBM.bitmapData;			imgBM.smoothing = true;						//imgBM.x = imgXPos;			//imgBMWidth = imgBM.width			//testImgWidth();		}				private function onOver(e:MouseEvent):void{			var targetObj:Object = e.currentTarget			//targetObj.buttonMode = true;			if(targetObj.hitTestPoint(this.mouseX, this.mouseY, true)){				//trace("Test from LoadImage: you got me!")			} 		}				public function testImgWidth():void{			//trace("this.targetMC.width from LoadImage: " + imgBMWidth);			//return "this.targetMC.width" + this.targetMC.width;						//this.targetMC.width = imgBMWidth;			//trace("this.targetMC.width from LoadImage: " + imgBMWidth);			var mcWidth:Number = imgBM.width					}				public function removeImage(imgHolder:MovieClip, indx:int):void{			var imgHolder:MovieClip;			imgHolder.removeChildAt (indx);		}	}}