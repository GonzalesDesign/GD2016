package {	//	//	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.media.Sound;	import flash.media.SoundChannel;	import flash.media.SoundLoaderContext;	import flash.media.SoundTransform;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.display.Graphics;	import flash.events.MouseEvent;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.events.ProgressEvent;	import flash.events.Event;	import flash.text.TextField;	import flash.text.TextFieldType;	import flash.text.TextFieldAutoSize;	import flash.events.IOErrorEvent;	import flash.events.ErrorEvent;	import flash.errors.IOError;	import caurina.transitions.Tweener;	import flash.xml.XMLDocument;	//•••--------------------------------------------------------------------------------------------------------------------------------------------------------------------•••≈||: CLASS	public class MP3_Player extends Sprite {		private var currSong:Sound;		private var songChannel:SoundChannel=new SoundChannel;		private var targetObject:Object;		//•••-------------------------------------------------------------------------------------------------------------------•••≈||: FLA MCs		//private var mp3CPanel:MP3_Skin; 		//		private var mp3PlayerContainer:MovieClip;		private var _targetGallery:MovieClip;		private var mp3CPanel:MovieClip;		private var oMP3SongName:Object;		private var oMP3ArtistName:Object;				private var mp3CP:MovieClip;		//private var mp3CP:MovieClip;//MP3_ControlPanel;		//•••-------------------------------------------------------------------------------------------------------------------•••≈||: AS		//private var myProgressLoader:RotatingLoader = new RotatingLoader(myRectangle);		//var transform:SoundTransform;		//•••-------------------------------------------------------------------------------------------------------------------•••≈||: XML		//		private var xmlLoader:URLLoader;		private var xDoc:XMLDocument;		private var muzicXML:XML;				//•••-------------------------------------------------------------------------------------------------------------------•••≈||: NUMBERS & INTEGERS		private var loadedPercentage:uint;		private var nSongCount:int;		private var nSongNodeType:int=0;		private var nSongSubSectionNode:int=0;		private var nSkinNodeType:int=1;		private var indexNum:int=0;		private var songPosition:int;		//private var nextSong:int = 0;		private var lowResPath:String;		private var sImage:String;		private var nMainImgDisplayPerc:Number;		private var nPrevImgDisplayPerc:Number;		private var nNextImgDisplayPerc:Number;				private var volumeLevel:Number = 1;				var volBarMaskWidth:Number;		//•••-------------------------------------------------------------------------------------------------------------------•••≈||: STRING		private var sSoundCaption:String;		private var sSkinPath:String;		private var sSiloImg:String;		private var sMP3Path:String;		private var tSongName:TextField;		//•••-------------------------------------------------------------------------------------------------------------------•••≈||: ARRAY		private var aMP3List:Array=new Array;		private var aSongName:Array=new Array;		private var aArtistName:Array=new Array;		private var songSelected:Boolean=false;		//•••-------------------------------------------------------------------------------------------------------------------•••≈||: BOOLEAN		private var toggleSoundPlayPause:Boolean = false;		//		//•••--------------------------------------------------------------------------------------------------------------------------------------------------------------------•••≈||: CONSTRUCTOR		public function MP3_Player(targetGallery:MovieClip) {			_targetGallery = targetGallery;			//trace("_targetGallery: " + _targetGallery.name);			init();			//shortenNames()		}		//		//•••--------------------------------------------------------------------------------------------------------------------------•••≈||: METHODS		/*private function shortenNames():void{		mp3CP = mainMP3ControlPanel_mc;		};*/		private function init():void {			loadXML();			//initMP3ControlPanelYPos ();		}		//		//•••-------------------------------------------------------------------------------------------------------------------•••≈||: Load XML		private function loadXML() {			//var request:URLRequest = new URLRequest("../LolaLiling/xml/MP3.xml");			//var request:URLRequest=new URLRequest("../Isdaan/xml/MP3.xml");			//var request:URLRequest = new URLRequest("../SamOlivia_March1509/xml/MP3.xml");			/*var request:URLRequest=new URLRequest("../NYC_Motorshow2009/xml/MP3.xml");			xmlLoader=new URLLoader;			xmlLoader.load(request);			xmlLoader.addEventListener(ProgressEvent.PROGRESS,xmlProgress);			xmlLoader.addEventListener(Event.COMPLETE,xmlComplete);			xmlLoader.addEventListener(ErrorEvent.ERROR,xmlFailed);*/						//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: XML LOADER : Local Connection || HTML FlashVars			xmlLoader = new URLLoader();									/***** FOR TESTING ONLY! ****/			var flashVarXML:String = "../NYC_Motorshow2009/xml/MP3.xml";			//var flashVarXML:String = "../../xml/MP3.xml";			var request:URLRequest = new URLRequest(flashVarXML);			xmlLoader.load (request);							/***** LOADING XML THRU FLASHVARS ONLY! ****/			//xmlLoader.load(new URLRequest(loaderInfo.parameters.staxMP3XML));						xmlLoader.addEventListener (ProgressEvent.PROGRESS, xmlProgress);			xmlLoader.addEventListener (Event.COMPLETE, xmlComplete);			xmlLoader.addEventListener (ErrorEvent.ERROR, xmlFailed);		}		//•••-------------------------------------------------------------------------------------------------------------------•••≈||: Load XML: xmlProgress		private function xmlProgress(p:ProgressEvent):void {			//trace ("xmlProgress: " + p.bytesLoaded + "  of  " + p.bytesTotal);		}		//•••-------------------------------------------------------------------------------------------------------------------•••≈||: Load XML: xmlFailed		private function xmlFailed(errorEvent:ErrorEvent):void {			trace("XML Load Fail");		}		//•••-------------------------------------------------------------------------------------------------------------------•••≈||: Load XML: xmlComplete		private function xmlComplete(e:Event):void {			xDoc=new XMLDocument;			xDoc.ignoreWhite=true;			muzicXML=new XML(xmlLoader.data);			xDoc.parseXML(muzicXML.toXMLString());			//•••----------------------------------------------------------------------------------------------------------------------------------•••≈||: xml vars			nSongCount=muzicXML.section[nSongNodeType].subSect[nSongSubSectionNode].media.length();			sMP3Path=muzicXML.section[nSongNodeType].@ MP3_PATH;			var sPlayerTitle:String=muzicXML.section.subSect[nSongSubSectionNode].@ TITLE;			var sPlayerSubTitle:String=muzicXML.section.subSect[nSongSubSectionNode].@ SUB_TITLE;			//			for (var i:int=0; i < nSongCount; i++) {				//•••----------------------------------------------------------------•••≈||: Collects the song names				var sMP3Name:String=muzicXML.section[nSongNodeType].subSect[nSongSubSectionNode].media[i].@ NAME;				//trace("sMP3Name: " + sMP3Name);				aMP3List[aMP3List.length]=sMP3Name;				//•••----------------------------------------------------------------•••≈||: Collects the song display names				var sSongName:String=muzicXML.section[nSongNodeType].subSect[nSongSubSectionNode].media[i].@ DISPLAY_NAME;				aSongName[aSongName.length]=sSongName;				//trace("aSongName: " + aSongName);				//•••----------------------------------------------------------------•••≈||: Collects the artist names				var sArtistName:String=muzicXML.section[nSongNodeType].subSect[nSongSubSectionNode].media[i].@ ARTIST;				aArtistName[aArtistName.length]=sArtistName;				//trace("aArtistName: " + aArtistName);			}			//•••----------------------------------------------------------------•••≈||: Load MP3 Control Panel from the FLA			mp3CPanel = _targetGallery;			//			//•••----------------------------------------------------------------•••≈||: Play MP3			playNextSong();			mp3CPanel.playPauseBtn_mc.addEventListener(MouseEvent.MOUSE_UP, onPlayPauseRelease);			mp3CPanel.playPauseBtn_mc.addEventListener(MouseEvent.ROLL_OVER, onPlayPauseOver);			mp3CPanel.playPauseBtn_mc.addEventListener(MouseEvent.ROLL_OUT, onPlayPauseOut);			mp3CPanel.mp3PrevBtn_mc.addEventListener(MouseEvent.MOUSE_UP, onPrevSongRelease);			mp3CPanel.mp3PrevBtn_mc.addEventListener(MouseEvent.ROLL_OVER, onPrevSongOver);			mp3CPanel.mp3PrevBtn_mc.addEventListener(MouseEvent.ROLL_OUT, onPrevSongOut);			mp3CPanel.mp3NxtBtn_mc.addEventListener(MouseEvent.MOUSE_UP, onNextSongRelease);			mp3CPanel.mp3NxtBtn_mc.addEventListener(MouseEvent.ROLL_OVER, onNextSongOver);			mp3CPanel.mp3NxtBtn_mc.addEventListener(MouseEvent.ROLL_OUT, onNextSongOut);			mp3CPanel.mp3Btn_Close.addEventListener(MouseEvent.ROLL_OVER, litenCloseButn);			mp3CPanel.mp3Btn_Close.addEventListener(MouseEvent.ROLL_OUT, drkenCloseButn);			mp3CPanel.mp3Btn_Close.addEventListener(MouseEvent.MOUSE_UP, onCloseSongRelease);						mp3CPanel.mp3VolumeBar_mc.mp3Bar.addEventListener(MouseEvent.MOUSE_UP, onVolumeRelease);						volBarMaskWidth = mp3CPanel.mp3VolumeBar_mc.mp3VolumeMask.width;						//mp3VolumeBar_mc.mp3VolumeMask.width = mp3Bar mp3VolumeBar		}		//		//•••----------------------------------------------------------------•••≈||: CONTROL PANEL FUNCTIONALITY: PLAY/PAUSE SONG EVENTS		private function onPlayPauseRelease(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;			toggleSoundPlayPause = !toggleSoundPlayPause;			//•••----------------------------------------------•••≈||: Current Song Paused			if (toggleSoundPlayPause == true) {				showPlayBtn();				songPosition = songChannel.position;				songChannel.stop();			} else {				showPauseBtn();				songChannel=currSong.play(songPosition);			}			//targetObject.addEventListener(Event.ENTER_FRAME, testing);		}		//		/*private function testing(e:Event):void {			//trace("toggleSoundPlayPause: " + toggleSoundPlayPause);			//mp3CPanel.y = (_targetGallery.height/2 - mp3CPanel.height/2)// +50;			mp3CPanel.mp3SongName_mc.mp3SongName.text = aSongName[indexNum];			//trace("indexNum: " + indexNum)		}*/		//		private function onPlayPauseOver(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;		}		private function onPlayPauseOut(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;		}		//		//		private function showPlayBtn():void {			toggleSoundPlayPause = true;			mp3CPanel.playPauseBtn_mc.playBtn_mc.visible = true;			mp3CPanel.playPauseBtn_mc.pauseBtn_mc.visible = false;		}		private function showPauseBtn():void {			toggleSoundPlayPause = false;			mp3CPanel.playPauseBtn_mc.playBtn_mc.visible = false;			mp3CPanel.playPauseBtn_mc.pauseBtn_mc.visible = true;		}		//		//		//•••----------------------------------------------------------------•••≈||: CONTROL PANEL FUNCTIONALITY: PREVIOUS SONG EVENTS		private function onPrevSongRelease(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;			//			showPauseBtn();			//			if (indexNum > 0) {				indexNum--;			} else {				indexNum = 0;			}			//•••--------------•••≈||: Load My Song			songChannel.stop();			loadMysong();			//showSongName()		}		private function onPrevSongOver(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;		}		private function onPrevSongOut(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;		}		//•••----------------------------------------------------------------•••≈||: CONTROL PANEL FUNCTIONALITY: NEXT SONG EVENTS		private function onNextSongRelease(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;						showPauseBtn();						if (indexNum < aMP3List.length-1) {				indexNum++;			} else {				indexNum = 0;			}			//•••--------------•••≈||: Load My Song			songChannel.stop();			loadMysong();		}		private function onNextSongOver(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;		}		private function onNextSongOut(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;		}		//•••----------------------------------------------------------------•••≈||: CONTROL PANEL FUNCTIONALITY: CLOSE MP3 PLAYER		private function onCloseSongRelease(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;			//•••------------------------------------------------•••≈:| Show buttons container			Tweener.addTween(_targetGallery,{y:((mp3CPanel.height + 100)), time:2,transition:"easeOutExpo"});		}		private function litenCloseButn(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;			targetObject.alpha = .5;		}		private function drkenCloseButn(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;			targetObject.alpha = 1;		}		//		//•••----------------------------------------------------------------•••≈||: CONTROL PANEL FUNCTIONALITY: MP3 VOLUME		private function onVolumeRelease(e:MouseEvent):void {			targetObject = e.currentTarget;			targetObject.buttonMode = true;			//•••------------------------------------------------•••≈:| Show buttons container			//Tweener.addTween(_targetGallery,{y:((mp3CPanel.height)), time:2,transition:"easeOutExpo"});			//trace((100 * targetObject.mouseX/targetObject.width ))						var volumeMask:Number = Math.round((100 * targetObject.mouseX/targetObject.width ))/100;			mp3CPanel.mp3VolumeBar_mc.mp3VolumeMask.width = volBarMaskWidth * volumeMask			volumeLevel = volumeMask;			trace("volumeLevel: " + volumeLevel)								//volBarWidth = Math.round(100 * targetMC.mouseX/targetMC.width)/100				//volBar_mc.barMask.width = volBarMaskWidth * volBarWidth						var transform:SoundTransform = new SoundTransform(volumeLevel, .5);			songChannel.soundTransform = transform;					}		//•••----------------------------------------------------------------•••≈||: CONTROL PANEL FUNCTIONALITY: LOAD SONG		private function loadMysong():void {			trace("//•••----------------------------------------------------------------•••≈||: start loadMysong");			currSong=new Sound();			currSong.load(new URLRequest(sMP3Path + aMP3List[indexNum]));						mp3CPanel.playPauseBtn_mc.playBtn_mc.visible = false;			oMP3SongName = mp3CPanel.mp3SongName;			oMP3SongName.text = aSongName[indexNum];						oMP3ArtistName = mp3CPanel.mp3ArtistName;			oMP3ArtistName.text = aArtistName[indexNum];						var transform:SoundTransform = new SoundTransform(volumeLevel, .5);			songChannel=currSong.play();			songChannel.soundTransform = transform;			songChannel.addEventListener(Event.SOUND_COMPLETE, soundComplete);			trace("//•••----------------------------------------------------------------•••≈||: end loadMysong");		}		//		//•••----------------------------------------------------------------•••≈||: Play Next Song		private function playNextSong():void {			if (indexNum < aMP3List.length-1) {				//indexNum++;				var randNum:Number = Math.random()*(aMP3List.length-1);//(aMP3List.length-1)):Number;				indexNum = randNum;				trace("Randomized indexNum: " + indexNum)				//•••--------------•••≈||: Load My Song				loadMysong();			} else {				indexNum = 0;				//•••--------------•••≈||: Load My Song				loadMysong();			}		}		//•••----------------------------------------------------------------•••≈||: On Sound Complete		private function soundComplete(e:Event):void {//Event //SoundEvent			playNextSong();		}		//•••--------------------------------------------------------------------------------------------------------------------------------------------•••≈||: MP3 LOADING: On Progress		private function onSongProgress(e:ProgressEvent):void {			loadedPercentage=Math.round(100 * e.bytesLoaded / e.bytesTotal);			//trace("The sound is " + loadedPercentage + "% loaded.");		}		//•••--------------------------------------------------------------------------------------------------------------------------------------------•••≈||: MP3 LOADING: On Complete		private function onSongComplete(e:Event):void {			trace("mp3 loaded");			songChannel.stop();			songChannel=currSong.play();		}		//•••--------------------------------------------------------------------------------------------------------------------------------------------•••≈||: MP3 LOADING: On Failed		private function onSoundFailed(errorEvent:IOErrorEvent):void {			songChannel=currSong.play();			//infoTextField.text = "The sound could not be loaded: " + errorEvent.text;		}		//•••-------------------------------------------------------------------------------------------------------------------•••≈||: Screen Resized Handler		/*private function initMP3ControlPanelYPos():void {			//stage.align = StageAlign.TOP_LEFT;			//stage.scaleMode = StageScaleMode.NO_SCALE;			_targetGallery.addEventListener(Event.RESIZE,resizeHandler);		}		private function resizeHandler(e:MouseEvent):void {			//mp3CPanel.y = _targetGallery.height/2 - mp3CPanel.height/2;			mp3CPanel.y = (stage.stageHeight/2 - mp3CPanel.height/2) +50;		}*/	}}