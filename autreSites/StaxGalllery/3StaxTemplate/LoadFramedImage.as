package {	import flash.display.MovieClip;	//	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.display.DisplayObject;	//	import flash.display.Graphics;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.display.Bitmap;	import flash.display.BitmapData;	//import flash.net.URLRequest;	import flash.events.ProgressEvent;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.IOErrorEvent;	import flash.events.ErrorEvent;	import flash.errors.IOError;	//•••≈---------------------------------------------------------•••≈||: Tweener	import caurina.transitions.Tweener;	//•••------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------•••≈||: CLASS	public class LoadFramedImage extends MovieClip {		//•••------------------------------------------------------------------•••≈||: PROPERTIES: LOADERS & BITMAPS		private var imageLoader:Loader;		private var imgBM:Bitmap;				//•••------------------------------------------------------------------•••≈||: PROPERTIES: MOVIECLIPS • OBJECTS				private var targetObject:Object;				private var targetMC:MovieClip;		private var imgBMWidth:Number;		private var imgXPos:Number;		//•••------------------------------------------------------------------•••≈||: PROPERTIES: STRING		private var targetURL:String;				private var progressAnim:MovieClip;				private var bDynamicFrame:Boolean;		private var sColorScheme:String;		private var myFrameColor:ColorThemes;		private var frameWidth:int;		private var frameHeight:int;		//•••--------------------------------------------------------------------------------------------------------------------------------------------------------------------------•••≈||: CONSTRUCTOR		public function LoadFramedImage(targetMC:MovieClip, targetURL:String, bDynamicFrame:Boolean, sColorScheme:String, frameWidth:int, frameHeight:int){			this.targetMC = targetMC;			this.targetURL = targetURL;			this.progressAnim = progressAnim;			this.imgXPos = imgXPos;			this.bDynamicFrame = bDynamicFrame;			this.sColorScheme = sColorScheme;			this.frameWidth = frameWidth;			this.frameHeight = frameHeight;			loadMe();					}				//•••------------------------------------------------------------------•••≈||: METHODS		private function loadMe():void{			imageLoader = new Loader();			var urlRekws:URLRequest = new URLRequest(this.targetURL);//aImgName[i]);			imageLoader.load(urlRekws);			this.targetMC.addChild(imageLoader);			//trace("imageLoader: " + imageLoader);			imageLoader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS,onFramedImgLoadingProgress);			imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, OnComplete);			imageLoader.addEventListener(MouseEvent.ROLL_OVER, onOver);			//trace("LoadFramedImage: targetMC.numChildren: " + targetMC.numChildren); 			cleanImageContainer (this.targetMC.imgFPO);			//cleanImageContainer (this.targetMC.imgFPO);								}				private function onProgress(e:ProgressEvent):void {			//trace("onProgress")			progressAnim.visible = true;		}				private function onFramedImgLoadingProgress (p:ProgressEvent):void {			if(p.bytesLoaded  < p.bytesTotal){				this.targetMC.progressBar.visible = true;				//•••≈-------------------------------------------------------------------•••≈||: Progress bar yPosition				this.targetMC.progressBar.y = (this.targetMC.height/2) -100;//(this.targetMC.height - 20);//0;//this.targetMC.description_mc.y - this.targetMC.description_mc.height;				//•••≈----------------------------------•••≈||: Scaling the progress bar mask				this.targetMC.progressBar.progressBar_mc.scaleX = (p.bytesLoaded/p.bytesTotal);							//imageTimer.stop ();			} else {				this.targetMC.progressBar.visible = false;			}		}				private function OnComplete(e:Event):void {						//progressAnim.visible = false;			//•••----------------------------------------------------------------•••≈||: New BitmapData: Current Image			imgBM = Bitmap(e.target.content);//e.target.content);			var imgBMData:BitmapData = imgBM.bitmapData;			imgBM.smoothing = true;						imgBM.x = - imgBM.width/2;//imgXPos;			imgBM.y = - imgBM.height/2;			//imgBMWidth = imgBM.width			//testImgWidth();			//•••≈-------------------------------------------------------------------•••≈||: Determined whether frame is dynamic(resize with the image) or static(doesn't resize with the image).			if(this.bDynamicFrame == true){				dynamicFrameSize();			} else {				trace("Dynamic image frame is off!")			}			frameColor();		}				private function dynamicFrameSize():void{						//•••≈----------------------------------•••≈||: Scaling image mask			Tweener.addTween (this.targetMC.imgMask,{							  width:imgBM.width - 2,							  height:imgBM.height - 2,							  time:1,							  transition:"easeOutExpo"});			//•••≈----------------------------------•••≈||: Scaling image background frame			Tweener.addTween (this.targetMC.frameBG,{							  width:imgBM.width+this.frameWidth,							  height:imgBM.height+this.frameHeight,							  time:1,							  transition:"easeOutExpo"});		}				private function frameColor():void{			//•••≈------------------------------------------------------------•••≈||: Assign color shade from ColorThemes sub-class			var shadeIndex0:int = 0;			var shadeIndex1:int = 1;			var shadeIndex2:int = 2;			var shadeIndex3:int = 3;			var shadeIndex4:int = 4;			var shadeIndex5:int = 5;			var shadeIndex6:int = 6;			//•••≈--------------------------------------------•••≈||: Assign a color shade to the image frame, progress bar						myFrameColor = new ColorThemes(this.targetMC.frameBG.bg, this.sColorScheme, shadeIndex0, 0);			myFrameColor = new ColorThemes(this.targetMC.progressBar, this.sColorScheme, shadeIndex3, 0);			/*trace("this.targetMC.frameBG.bg :" + this.targetMC.frameBG.bg);			trace("this.sColorScheme :" + this.sColorScheme);			trace("shadeIndex0 :" + shadeIndex0);			trace("shadeIndex3 :" + shadeIndex3);*/		}				//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: Clean container		private function cleanImageContainer (imgHolder:MovieClip):void {			//trace("imgHolder.numChildren :" + imgHolder.numChildren);			if (imgHolder.numChildren > 1) {				imgHolder.removeChildAt (1);			}		}				private function onOver(e:MouseEvent):void{			var targetObj:Object = e.currentTarget			//targetObj.buttonMode = true;			if(targetObj.hitTestPoint(this.mouseX, this.mouseY, true)){				//trace("Test from LoadFramedImage: you got me!")			} 		}				public function testImgWidth():void{			//trace("this.targetMC.width from LoadFramedImage: " + imgBMWidth);			//return "this.targetMC.width" + this.targetMC.width;						//this.targetMC.width = imgBMWidth;			//trace("this.targetMC.width from LoadFramedImage: " + imgBMWidth);			var mcWidth:Number = imgBM.width					}		public function removeImage(imgHolder:MovieClip, indx:int):void{			imgHolder.removeChildAt (indx);		}	}}