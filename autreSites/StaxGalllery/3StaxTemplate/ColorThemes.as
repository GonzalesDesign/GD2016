package {	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.MouseEvent;	import flash.geom.Matrix;	import flash.geom.ColorTransform;	import flash.geom.Transform;	import flash.display.GradientType;	public class ColorThemes extends MovieClip {		private var mainTargetMC:MovieClip;		private var targetMC:MovieClip;		private var leftGrad:uint;		private var midBase:uint;		private var rightGrad:uint;		private var rotationGrad:uint;		private var gradWidth:int;		private var gradHeight:int;		private var translateX:int;		private var translateY:int;		private var target:MovieClip;		private var kolor:uint;				//•••-------------------------------------------------•••≈||: COLOR SHADES		private var colorShade0:uint;		private var colorShade1:uint;		private var colorShade2:uint;		private var colorShade3:uint;		private var colorShade4:uint;		private var complimentGrey:uint;				//private var myColor:ColorTransform;		private var sColorScheme:String;		private var shadeIndex:int;		private var colorShade:uint;		private var lightestShade:uint;		private var darkestShade:uint;				private var aTargetMCs:Array = new Array();								private var aColorShades:Array;		private var aReddishShades:Array;		private var aBlueishShades:Array;		private var aAllShadesCollection:Array;				private var allShadesIndex:int;				private var hxValue:uint;				private var myColorGrad:GradationColorTransform		private var shadeType:String;		private var gradRotation:int;		//•••--------------------------------------------------------------------------------------------------------------------------------------------------------------------•••≈||: CONSTRUCTOR		public function ColorThemes(									mainTargetMC:MovieClip,									sColorScheme:String,									shadeIndex:int,									gradRotation:int									//shadeType:String									//gradBG:MovieClip									//colorShade:uint									//kolor:uint									//leftGrad:uint, 									//midBase:uint, 									//rightGrad:uint, 									//rotationGrad:uint									) {			this.mainTargetMC = mainTargetMC;			this.sColorScheme = sColorScheme;			this.shadeIndex = shadeIndex;			this.colorShade = colorShade;			this.aTargetMCs = aTargetMCs;			//this.kolor = kolor;			this.leftGrad = leftGrad;			this.midBase = midBase;			this.rightGrad = rightGrad;			this.rotationGrad = rotationGrad;						this.hxValue = hxValue;			//this.gradBG = gradBG;			this.gradRotation = gradRotation;			//this.gradWidth = gradWidth			//target = new MovieClip();			//drawGradient(target);			//this.targetMC.addChild(target);						/*var aColorShades:Array = new Array("Reddish", "Blueish");//, "Greyish", "Greenish", "Yellowish");						var aReddishShades:Array = new Array(0x720000, 0x990000, 0xCC0000, 0xFF0000, 0xFF6666, 0x666666);			var aBlueishShades:Array = new Array(0x000033, 0x002D88, 0x0033CC, 0x0099FF, 0x99CCFF, 0x6A320E);						var aAllShadesCollection:Array = new Array(aReddishShades, aBlueishShades);						//PSEUDO CODE			for (var i:int=0; i < aColorShades.length; i++) {				if(this.sColorScheme == aColorShades[i]){					myColorTheme = ColorThemes(this.mainTargetMC, aColorShades[i], aAllShadesCollection[i]);				}			}*/									//colorSteps();			//colorizedMe(this.mainTargetMC, this.kolor);						shadeMe();						//getDarkestColor()						//Pseudo//			if(aColorShades[1]){//				 aAllShadesCollection[1];//			}						//trace("this.targetMCW:  " + this.targetMC.width);		}		public function shadeMe():void{			aColorShades = new Array("red", "blue", "green", "purple", "orange", "grey")//, "Orange", "Yellowish", "Greyish", );			/*aReddishShades = new Array(									   0x720000,  //darkest shade									   0x990000, 									   0xCC0000, 									   0xFF0000, 									   0xFF6666, 									   0x666666);			aBlueishShades = new Array(0x000033, 0x002D88, 0x0033CC, 0x0099FF, 0x99CCFF, 0x6A320E);			*/			//aAllShadesCollection = new Array(aReddishShades, aBlueishShades);			//trace("this.sColorScheme: " + this.sColorScheme)			aAllShadesCollection = new Array();			//aReddishShades, aBlueishShades);			//trace("aAllShadesCollection: " + aAllShadesCollection);				aAllShadesCollection[0] = [0x720000, 0x990000, 0xCC0000, 0xFF0000, 0xFF6666, 0xFFE6E6, 0x666666, 0x090000]; //Reddish Colors				aAllShadesCollection[1] = [0x000033, 0x002D88, 0x0033CC, 0x0099FF, 0x99CCFF, 0xE6F2FF, 0x392513, 0x000011]; //Blueish Colors				aAllShadesCollection[2] = [0x003300, 0x006600, 0x009900, 0x00FF33, 0xD6FEAB, 0xEFFEDE, 0x362538, 0x001100]; //Greenish Colors				aAllShadesCollection[3] = [0x420143, 0x660066, 0xB101B1, 0xFD0BFD, 0xFFC4FF, 0xFFEEFF, 0x29172D, 0x070009]; //Puprleish Colors				aAllShadesCollection[4] = [0x541A01, 0x993300, 0xCC3300, 0xFF6600, 0xFEBB78, 0xFFE7DD, 0x463C31, 0x1A0700];//Orange				aAllShadesCollection[5] = [0x1A1A1A, 0x333333, 0x666666, 0x999999, 0xCCCCCC, 0xEAEAEA, 0x444444, 0x000000];//Greyish			//colorValue();						for (var i:int=0; i < aColorShades.length; i++) {												/*this.sColorScheme = aAllShadesCollection[i];				switch(this.sColorScheme){					case aColorShades[0]:						aAllShadesCollection[0]						colorizedMe(this.mainTargetMC, aBlueishShades[0]);					break;					case "sh"*/									//•••≈--------------------------------------------------------------------------------•••≈||: Based on the assigned color shade from the xml file, if matches with any of aColorShades parameters, trigger that same index number with aAllShadesCollection arrayparam.				if(this.sColorScheme == aColorShades[i]){					//trace("aColorShades[i]: " + aColorShades[i])										//if(this.shadeType == "Flat"){					if(this.shadeIndex < 100){						//•••≈--------------------------------------------------------------------------------•••≈||: Apply specific color shade to this target mc.											colorizedMe(this.mainTargetMC, aAllShadesCollection[i][this.shadeIndex]);						//trace("aAllShadesCollection[i][this.shadeIndex]: " + aAllShadesCollection[i][this.shadeIndex])					}					//if(this.shadeType == "Gradation"){					if(this.shadeIndex > 100){						myColorGrad = new GradationColorTransform(this.mainTargetMC, aAllShadesCollection[i][3], aAllShadesCollection[i][1], aAllShadesCollection[i][7], this.gradRotation);					}					//aAllShadesCollection[i];					//trace("aAllShadesCollection[i]: " + aAllShadesCollection[i])										//var sAllShades:String = aAllShadesCollection[i];										//PSEUDO CODE					//myColorTheme = ColorThemes(this.mainTargetMC, aColorShades[i], aAllShadesCollection[i]);					//trace("sAllShades: " + sAllShades);					//trace("aColorShades[i]: " + aColorShades[i]);					allShadesIndex = i;					//this.colorShade = aAllShadesCollection[i][this.shadeIndex];					/*trace("this.colorShade: " + this.colorShade);					trace("allShadesIndex: " + allShadesIndex);					trace("aAllShadesCollection[0][0]: " + aAllShadesCollection[0][0]);					trace("aAllShadesCollection[allShadesIndex][0]: " + aAllShadesCollection[allShadesIndex][0]);*/					lightestShade = aAllShadesCollection[i][5];				}				//colorMe3(allShadesIndex);															}			//bgGradColorValues(0);					}		//, hxValue:uint				//public function bgGradColorValues(colorIndx:int):void{//			//			aColorShades = new Array("Reddish", "Blueish", "Greenish", "Purpleish", "Orange", "Greyish")//, "Orange", "Yellowish", "Greyish", );//			/*aReddishShades = new Array(//									   0x720000,  //darkest shade//									   0x990000, //									   0xCC0000, //									   0xFF0000, //									   0xFF6666, //									   0x666666);//			aBlueishShades = new Array(0x000033, 0x002D88, 0x0033CC, 0x0099FF, 0x99CCFF, 0x6A320E);			*///			//aAllShadesCollection = new Array(aReddishShades, aBlueishShades);//			//trace("this.sColorScheme: " + this.sColorScheme)//			aAllShadesCollection = new Array();//			//aReddishShades, aBlueishShades);//			//trace("aAllShadesCollection: " + aAllShadesCollection);//				aAllShadesCollection[0] = [0x720000, 0x990000, 0xCC0000, 0xFF0000, 0xFF6666, 0xFFE6E6, 0x666666]; //Reddish Colors//				aAllShadesCollection[1] = [0x000033, 0x002D88, 0x0033CC, 0x0099FF, 0x99CCFF, 0xE6F2FF, 0x6A320E]; //Blueish Colors//				aAllShadesCollection[2] = [0x003300, 0x006600, 0x009900, 0x00FF33, 0xD6FEAB, 0xEFFEDE, 0x362538]; //Greenish Colors//				aAllShadesCollection[3] = [0x420143, 0x660066, 0xB101B1, 0xFD0BFD, 0xFFC4FF, 0xFFEEFF, 0x29172D]; //Puprleish Colors//				aAllShadesCollection[4] = [0x541A01, 0x993300, 0xCC3300, 0xFF6600, 0xFEBB78, 0xFFE7DD, 0x463C31];//Orange//				aAllShadesCollection[5] = [0x1A1A1A, 0x333333, 0x666666, 0x999999, 0xCCCCCC, 0xEAEAEA, 0x444444];//Greyish//				//			/*var val1:uint = aAllShadesCollection[colorIndx][0];//			var val2:uint = aAllShadesCollection[colorIndx][2];//			var val3:uint = aAllShadesCollection[colorIndx][5];*///			//trace("hxValue: " + hxValue);//			/*trace("val1: " + val1);//			trace("val2: " + val2);//			trace("val3: " + val3);//			trace("aAllShadesCollection[colorIndx][0]: " + aAllShadesCollection[colorIndx][0]);//			trace("aAllShadesCollection[colorIndx][2]: " + aAllShadesCollection[colorIndx][2]);//			trace("aAllShadesCollection[colorIndx][5]: " + aAllShadesCollection[colorIndx][5]);*///			trace("colorIndx: " + colorIndx);//			//			myColorGrad = new GradationColorTransform(this.mainTargetMC, aAllShadesCollection[colorIndx][0], aAllShadesCollection[colorIndx][5], aAllShadesCollection[colorIndx][6], 90);//		}				/*public function getLightestColor(mc:MovieClip):void{			//trace("this.colorShade: " + this.colorShade);			colorizedMe(mc, lightestShade);			//trace("lightestShade :" + lightestShade);			//drkestColor = aAllShadesCollection[0][0]			//trace("aAllShadesCollection[0][0]: " + aAllShadesCollection[0][0]);			//trace("aAllShadesCollection[allShadesIndex][0]: " + aAllShadesCollection[allShadesIndex][0]);		}*/				/*private function colorMe3(indx:int):void{			colorMe(this.mainTargetMC, aAllShadesCollection[indx])			//trace("aAllShadesCollection[indx]: " + aAllShadesCollection[indx]);		}*/		/*public function drawGradient(sprite:MovieClip):void {			var matrix:Matrix = new Matrix();			var toDegrees:Number = Math.PI/180;			var myAngle = this.rotationGrad*toDegrees;			//this.gradWidth = gradWidth;// = this.targetMC.stage.stageWidth;//this.targetMC.width;//this.targetMC.width;//stage.stageWidth;			gradWidth = 3000;			gradHeight = 1000;//this.targetMC.stage.stageWidth;// this.targetMC.height;//this.targetMC.height;//this.targetMC.height;//stage.stageHeight;			translateX = 0;			translateY = 0;			matrix.createGradientBox(gradWidth, gradHeight, myAngle, translateX, translateY);			var colors:Array = [this.leftGrad, this.midBase, this.midBase, this.midBase, this.rightGrad];			var alphas:Array = [1, 1, 1, 1, 1];			var ratios:Array = [0, 100, 122, 175, 255];			sprite.graphics.beginGradientFill(GradientType.LINEAR, colors, alphas, ratios, matrix);			sprite.graphics.drawRect(0, 0, gradWidth, gradHeight);						trace("gradWidth: " + gradWidth)		}*/				/*public function colorSteps():void{			colorMe(this.mainTargetMC, this.kolor, 1);			//colorMe2();		}*/		//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: Colorized Methods		public function colorizedMe(mc:MovieClip, kolor:uint):void {			var myColor:ColorTransform = new ColorTransform();			myColor.color = kolor;			mc.transform.colorTransform = myColor;			//mc.alpha = alfa;			//mc.alpha = 1;		}		/*private function colorMe2():void {			var myColor:ColorTransform = new ColorTransform();			myColor.color = this.kolor;			this.aTargetMCs.transform.colorTransform = myColor;			this.aTargetMCs.alpha = 1;		}*/								/*private function colorReddish():void{			//colorMe(this.aTargetMCs, kolor, 1);			colorShade0 =  0x720000; // Dark Maroon			colorShade1 = 0x990000;// Maroon			colorShade2 = 0xCC0000;// Reddish Maroon			colorShade3 = 0xFF0000;// Bright Red			colorShade4 = 0xFF6666;// Reddish Pink			complimentGrey = 0x666666; //70 grey		}*/				/*private function colorShade4():void{			var aMCs2Shade:Array = new Array(											 myMusicControlPanel.MP3Menu.songListNameBG											 											 );			trace("aMCs2Shade.length: " + aMCs2Shade.length);			//aDarkestColorMCs.push(myMusicControlPanel.MP3Menu.songListNameHiliter);			//aDarkestColorMCs.push(myMusicControlPanel.artistPix.artistBG);			for (var iDc:int=0; iDc < aMCs2Shade.length; iDc++) {				var shadeTheseMC:MovieClip = new MovieClip();				shadeTheseMC = aMCs2Shade[iDc];				//colorMe(shadeTheseMC, 0x990000, 1);				colorMe(shadeTheseMC, 0xFF6666, 1);			}		}*/								/*  public function clickHandler(event:MouseEvent):void {		var rOffset:Number = transform.colorTransform.this.leftGradOffset + 25;		var bOffset:Number = transform.colorTransform.this.leftGradOffset - 25;		this.transform.colorTransform = new ColorTransform(1, 1, 1, 1, rOffset, 0, bOffset, 0);		  }*/	}}