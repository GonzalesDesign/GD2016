package {	//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: Video Imports	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.*;	import flash.media.Video;	import flash.media.Sound;  	import flash.media.SoundChannel;    	import flash.media.SoundTransform;	import flash.net.NetConnection;	import flash.net.NetStream;	import flash.geom.Rectangle;	import flash.display.Shape; 	import flash.events.MouseEvent;	//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: VIDEO CLASS	public class LoadVideoSubClass extends MovieClip {		//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: VIDEO VARS		//private var targetVidHolder:MovieClip;		private var connection:NetConnection;		private var stream:NetStream;		private var vidyo:Video;				private var videoPlaying:Boolean = true;		private var bToggleVideoPausePlay:Boolean;		private var nDuration:Number;		private var infoObject:Object;				private var volumePosition:Number = 1;		private var volumeControlPanel:String;				private var oMetaClient:Object = new Object();		private var nPercent:Number = 0;						//private var rectangle:Shape = new Shape(); 		private var rectangle:Rectangle;// = new Rectangle(); 		//•••≈-----------------------------------------------------------------------------•••≈||: Video Attach AS file		//private var myVideo:VidPlayer;		//•••≈-----------------------------------------------------------------------------•••≈||: Attach MCs from Gallery9.swf		private var targetVideoContainer:videoContainer;// = new videoContainer();		private var myVideoSelectBtn:videoSelectionBtn;// = new videoSelectionBtn;		/*private var conn:NetConnection;		private var stream:NetStream;		private var vid:Video;		private var flick:String;*/		//•••≈-----------------------------------------------------------------------------•••≈||: Video Strings		private var sVID_TITLE:String;		private var sVID_MEDIA:String;		private var sFLV_PATH:String;// = "../NYC_Motorshow2009/Media/Video/"		//private var sInitialVideo:String;		private var sVideo:String;		//•••≈-----------------------------------------------------------------------------•••≈||: Video Booleans		private var videoPlayerOn:Boolean = false;		private var bVideoPlayed:Boolean = false;		//•••≈----------------------------------------------------------------------------•••≈||: Video ARRAY		private var aVideoList:Array;//=new Array();		//private var aVideoList2:Array=new Array("LloydAnthonyVid-1.flv", "video2.flv", "video3.flv", "video8.flv", "Hennnelly.flv", "bourne_ultimatum.flv");		private var aVideoSelectBtns:Array;// = new Array();		//•••≈-----------------------------------------------------------------------------•••≈||: Video Integers/Numbers		private var vidIndexNum:int = 0;		//•••≈-----------------------------------------------------------------------------•••≈||: Video Main Node		//private var nVideoNodeType:int = 3;		//•••≈----------------------------------------------------------------------------•••≈||: Video counts (video.length)		//private var nVideoCount:int;		//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: VIDEO CONSTRUCTOR		public function LoadVideoSubClass (										   targetVideoContainer:videoContainer, 										   vidyo:Video, 										   sFLV_PATH:String, 										   aVideoList:Array, 										   myVideoSelectBtn:videoSelectionBtn, 										   aVideoSelectBtns:Array, 										   vidIndexNum:int) {						this.targetVideoContainer = targetVideoContainer;			this.vidyo = vidyo;			//this.sInitialVideo = sInitialVideo;			this.sVideo = sVideo;			this.sFLV_PATH = sFLV_PATH;			this.aVideoList = aVideoList;			this.myVideoSelectBtn = myVideoSelectBtn;			this.aVideoSelectBtns = aVideoSelectBtns;			this.vidIndexNum = vidIndexNum;			//this.nVideoNodeType = nVideoNodeType;			//this.nVideoCount = nVideoCount;						this.targetVideoContainer.videoWindow.playPauseBtn_mc.visible = false;						initVideo();		}		private function initVideo():void{			connection = new NetConnection();			connection.addEventListener (NetStatusEvent.NET_STATUS, netStatusHandler);			connection.addEventListener (SecurityErrorEvent.SECURITY_ERROR, securityErrorHandler);			connection.connect (null);			/*trace("connection: " + connection);			trace("targetVideoContainer: " + targetVideoContainer);			trace("this.targetVideoContainer: " + this.targetVideoContainer);*/			//targetVideoContainer.playPauseBtn_mc.playBtn_mc.visible = false;		}		//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: VIDEO HANDLERS		private function netStatusHandler (event:NetStatusEvent):void {			switch (event.info.code) {				case "NetConnection.Connect.Success" :					connectStream ();					break;				case "NetStream.Play.StreamNotFound" :					trace ("Unable to locate vidyo: " + vidyo);					break;			}		}						//•••≈-----------------------------------------------------------------------------•••≈||: Connection Stream		private function connectStream ():void {			stream = new NetStream(connection);			stream.addEventListener (NetStatusEvent.NET_STATUS, netStatusHandler);			stream.addEventListener (AsyncErrorEvent.ASYNC_ERROR, asyncErrorHandler);			//vidyo = new Video();			this.vidyo.attachNetStream (stream);			this.vidyo.smoothing = true;			//•••≈------------------------------------------------•••≈||: Video XY positions			//this.vidyo.x = this.targetVideoContainer.videoWindow.vidPos.x;			//this.vidyo.y = this.targetVideoContainer.videoWindow.vidPos.y;					//trace("vidyoX: " + this.vidyo.x);			//trace("this.aVideoList.length: " + this.aVideoList.length);			//this.vidyo.scaleX = .5;			//this.vidyo.scaleY = .5;			//addChild(targetVideoContainer);			//targetVideoContainer.			//addChild (this.vidyo);			//•••≈------------------------------------------------•••≈||: Initial Video Play			//trace("this.sInitialVideo: " + this.sInitialVideo)			//stream.play (this.sInitialVideo);//this.sFLV_PATH+this.aVideoList[0]);			//stream.play (this.sFLV_PATH+this.aVideoList[0]);			//stage.addEventListener(Event.ACTIVATE, loadInitialVideo);			/*stream.play (this.sFLV_PATH+this.aVideoList[0]);			trace("this.sFLV_PATH+this.aVideoList[1]: " + (this.sFLV_PATH+this.aVideoList[0]))*/						//loadInitialVideo()						this.targetVideoContainer.videoWindow.playbackVideoBar.scaleX = nPercent;			this.targetVideoContainer.videoWindow.addEventListener(Event.ENTER_FRAME, videoLoadedPercentage);						//trace("targetVideoContainer.playbackVideoBarX: " + targetVideoContainer.playbackVideoBar.x);			//trace("this.aVideoList.length: " + this.aVideoList.length)						videoControlPanel ();						volumeControlPanel = "vertical";												if(volumeControlPanel == "horizontal"){				this.targetVideoContainer.volumeControl.volumeBtn.x = this.targetVideoContainer.volumeControl.volumeSoundBar.width			}			if(volumeControlPanel == "vertical"){				this.targetVideoContainer.volumeControl.volumeBtn.y = - this.targetVideoContainer.volumeControl.volumeSoundBar.height;				//trace("this.targetVideoContainer.volumeControl.volumeBtn.y: " + this.targetVideoContainer.volumeControl.volumeBtn.y)			}						this.targetVideoContainer.volumeControl.volumeBtn.addEventListener (MouseEvent.MOUSE_DOWN, volumeSliderDown);				this.targetVideoContainer.volumeControl.volumeBtn.addEventListener (MouseEvent.MOUSE_UP, volumeSliderUp);			this.targetVideoContainer.volumeControl.volumeBtn.stage.addEventListener (Event.MOUSE_LEAVE, mouseLeave);//----onReleaseOutside is so cumbersome and pain in the ass!			this.targetVideoContainer.volumeControl.volumeBtn.addEventListener(MouseEvent.MOUSE_WHEEL, volumeSliderDown);			//trace("this.targetVideoContainer.volumeControl.volumeSoundBarWidth: " + this.targetVideoContainer.volumeControl.volumeSoundBar.width);						this.targetVideoContainer.videoWindow.addEventListener (MouseEvent.MOUSE_OVER, showPlayPauseBtn);			this.targetVideoContainer.videoWindow.addEventListener (MouseEvent.MOUSE_OUT, hidePlayPauseBtn);						//•••≈------------------------------------------------•••≈||: FLV Metadata: Properties			oMetaClient.onMetaData = function(metadata:Object):void{				//trace("metadata.duration: " + metadata.duration)				nDuration = metadata.duration;				//trace("nDuration: " + nDuration)			}			stream.client = oMetaClient;		}				//•••≈----------------------------------------------------------------------------•••≈||: Video Security/Async Error Handlers		private function securityErrorHandler (event:SecurityErrorEvent):void {			trace ("securityErrorHandler: " + event);		}		private function asyncErrorHandler (event:AsyncErrorEvent):void {			// ignore AsyncErrorEvent events.		}				public function loadInitialVideo(sInitVideo:String):void{						this.targetVideoContainer.videoWindow.vidPos.addChild (this.vidyo);			this.vidyo.smoothing = true;			//•••≈------------------------------------------------•••≈||: Load Video and Play			/*this.sVideo = sVideo;			trace("this.sVideo]: " + (this.sVideo))			stream.play (this.sVideo);*/			//trace("this.sFLV_PATH + this.aVideoList[5]: " + (this.sFLV_PATH + this.aVideoList[this.vidIndexNum]))			//stream.play (this.sFLV_PATH+this.aVideoList[this.vidIndexNum]);						stream.play (this.sFLV_PATH+sInitVideo);			//•••≈------------------------------------------------•••≈||: Video Play/Pause Btns Visibility			this.targetVideoContainer.videoWindow.playPauseBtn_mc.playBtn_mc.visible = false;			this.targetVideoContainer.videoWindow.playPauseBtn_mc.pauseBtn_mc.visible = true;									//trace("this.sFLV_PATH+this.aVideoList[1]: " + (this.sFLV_PATH+sInitVideo));//this.aVideoList[0]))		}				private function showPlayPauseBtn(e:MouseEvent):void {		//public function loadPublicVideo (sVideo:String):void {				var targetObject:Object = e.currentTarget;			targetObject.buttonMode = true;			targetObject.playPauseBtn_mc.visible = true;		}		private function hidePlayPauseBtn(e:MouseEvent):void {		//public function loadPublicVideo (sVideo:String):void {				var targetObject:Object = e.currentTarget;			targetObject.buttonMode = true;			targetObject.playPauseBtn_mc.visible = false;		}				//•••≈----------------------------------------------------------------------------•••≈||: VIDEO CONTROL PANEL		public function videoControlPanel ():void {			//trace("video control panel: "  + this.targetVideoContainer);			//trace("this.targetVideoContainer.playPauseBtn_mc: "  + this.targetVideoContainer.playPauseBtn_mc);			//trace("this.aVideoList.length2: " + this.aVideoList.length);			//this.targetVideoContainer.x = stage.stageWidth/2;			//this.targetVideoContainer.y = stage.stageHeight/2;			/*this.targetVideoContainer.x = stage.stageWidth/2;			this.targetVideoContainer.y = stage.stageHeight/2;			trace("this.targetVideoContainer: " + this.targetVideoContainer);*/			//trace("this.targetVideoContainer.playPauseBtn_mc: " + this.targetVideoContainer.playPauseBtn_mc);						this.targetVideoContainer.videoWindow.playPauseBtn_mc.addEventListener (MouseEvent.CLICK, togglePlayPauseVideo);						this.targetVideoContainer.videoWindow.playPauseBtn_mc.playBtn_mc.visible = false;			//this.myVideoSelectBtn.addEventListener (MouseEvent.MOUSE_OVER, onVidPlayPauseOver);				//this.myVideoSelectBtn.addEventListener (MouseEvent.MOUSE_OUT, onVidPlayPauseOut);				this.targetVideoContainer.videoWindow.playbackVideoBarBG.addEventListener (MouseEvent.CLICK, videoBarSeek);								/*var vidLength:int = this.aVideoList.length;			for(var i:int = 0; i<vidLength; i++){				this.myVideoSelectBtn = new videoSelectionBtn();				this.myVideoSelectBtn.x = this.targetVideoContainer.vidSelectBtnPos.x + (75 * i);				//this.myVideoSelectBtn.x = 10 + 75 * i;				this.myVideoSelectBtn.y = this.targetVideoContainer.vidSelectBtnPos.y;								this.targetVideoContainer.addChild(this.myVideoSelectBtn);				trace("this.myVideoSelectBtnX: " + this.myVideoSelectBtn.x)				//•••≈----------------------------------------------------------------------------•••≈||: Push Video Selection Buttons to an Array				aVideoSelectBtns[aVideoSelectBtns.length] = this.myVideoSelectBtn;								//this.myVideoSelectBtn.addEventListener (MouseEvent.CLICK, loadVideo);					this.myVideoSelectBtn.addEventListener (MouseEvent.MOUSE_OVER, onVidPlayPauseOver);					this.myVideoSelectBtn.addEventListener (MouseEvent.MOUSE_OUT, onVidPlayPauseOut);					this.targetVideoContainer.playbackVideoBarBG.addEventListener (MouseEvent.CLICK, videoBarSeek);				}*/			/*this.targetVideoContainer.playPauseBtn_mc.addEventListener (MouseEvent.CLICK, togglePlayPauseVideo);						this.targetVideoContainer.playPauseBtn_mc.playBtn_mc.visible = false;			//this.targetVideoContainer.addEventListener(Event.ENTER_FRAME, startVideoTimer);						var vidLength:int = this.aVideoList.length;			for(var i:int = 0; i<vidLength; i++){								this.myVideoSelectBtn = new videoSelectionBtn();				this.myVideoSelectBtn.x = this.targetVideoContainer.vidSelectBtnPos.x + (75 * i);				//this.myVideoSelectBtn.x = 10 + 75 * i;				this.myVideoSelectBtn.y = this.targetVideoContainer.vidSelectBtnPos.y;								this.targetVideoContainer.addChild(this.myVideoSelectBtn);				trace("this.myVideoSelectBtnX: " + this.myVideoSelectBtn.x)				//•••≈----------------------------------------------------------------------------•••≈||: Push Video Selection Buttons to an Array				aVideoSelectBtns[aVideoSelectBtns.length] = this.myVideoSelectBtn;								this.myVideoSelectBtn.addEventListener (MouseEvent.CLICK, loadVideo);					this.myVideoSelectBtn.addEventListener (MouseEvent.MOUSE_OVER, onVidPlayPauseOver);					this.myVideoSelectBtn.addEventListener (MouseEvent.MOUSE_OUT, onVidPlayPauseOut);									this.targetVideoContainer.playbackVideoBarBG.addEventListener (MouseEvent.CLICK, videoBarSeek);								}*/		}						public function loadVideo (e:MouseEvent):void {		//public function loadPublicVideo (sVideo:String):void {				var targetObject:Object = e.currentTarget;			targetObject.buttonMode = true;			targetObject.alpha = .25;			targetObject.bVideoPlayed = true;			this.vidIndexNum = this.aVideoSelectBtns.indexOf(targetObject);						//trace("vidIndexNum: " + this.vidIndexNum)			//trace("aVideoSelectBtns[0]: " + this.aVideoSelectBtns[this.vidIndexNum])			//trace("this.aVideoList.length3: " + this.aVideoList.length);			//this.targetVideoContainer.videoWindow.vidPos.addChild (this.vidyo);						this.vidyo.smoothing = true;			//•••≈------------------------------------------------•••≈||: Load Video and Play						/*this.sVideo = sVideo;			trace("this.sVideo]: " + (this.sVideo))			stream.play (this.sVideo);*/			//trace("this.sFLV_PATH + this.aVideoList[5]: " + (this.sFLV_PATH + this.aVideoList[this.vidIndexNum]))						stream.play (this.sFLV_PATH+this.aVideoList[this.vidIndexNum]);						//•••≈------------------------------------------------•••≈||: Video Play/Pause Btns Visibility			this.targetVideoContainer.videoWindow.playPauseBtn_mc.playBtn_mc.visible = false;			this.targetVideoContainer.videoWindow.playPauseBtn_mc.pauseBtn_mc.visible = true;						//trace("this.targetVideoContainer.videoWindow: " + this.targetVideoContainer.videoWindow)			//trace("this.targetVideoContainer.videoWindowName: " + this.targetVideoContainer.videoWindow.name)			//bToggleVideoPausePlay = false;						//•••≈------------------------------------------------•••≈||: Video Buffer Time			stream.bufferTime = 10;			//•••≈------------------------------------------------•••≈||: Video Bytes Percentage			//this.targetVideoContainer.videoWindow.addEventListener(Event.ENTER_FRAME, videoLoadedPercentage);		}		//•••≈----------------------------------------------------------------------------•••≈||: Video Sound Volume		/*private function vidVolume():void{			//var channel:SoundChannel;			var transform:SoundTransform = new SoundTransform(0.15, 1.0);          //  channel = vidyo.play();            //channel.soundTransform = transform;		}*/		//•••≈------------------------------------------------•••≈||: Capture Volume position in relation to the volumeSoundBar		private function setVolumeBar():void {			if(volumeControlPanel == "horizontal"){				volumePosition = Math.round(this.targetVideoContainer.volumeControl.volumeBtn.x/this.targetVideoContainer.volumeControl.volumeSoundBar.width * 100)/100;			}			if(volumeControlPanel == "vertical"){				volumePosition = Math.round(this.targetVideoContainer.volumeControl.volumeBtn.y/this.targetVideoContainer.volumeControl.volumeSoundBar.height * 100)/100;			}			setVolume(volumePosition);			//trace("volumePosition: " + volumePosition)		}		//•••≈------------------------------------------------•••≈||: Video Volume Sliding Btn startDrag and stopDrag 		private function volumeSliderDown(e:MouseEvent):void{			var targetObject:Object = e.currentTarget;			targetObject.buttonMode = true;						//var rectangle:Rectangle;			//var rectangle:Shape = new Shape(); 						if(volumeControlPanel == "horizontal"){				rectangle = new Rectangle(0, 0, 200, 0);			}			if(volumeControlPanel == "vertical"){				//•••≈---Creates an invisible rectangle guide limiter for the button to travel. Bounding box				//createRectangle(0, 0, 20, 200);				/*rectangle = new Rectangle(20,200,#ffffff);//-86				 addChild(rectangle);				 rectangle.x = 0;				 rectangle.y = 0;*/ 				 //•••≈---This height has to correspond with the height of the sound bar height				 rectangle = new Rectangle(0, 0, 0, -200);			}			targetObject.startDrag(false, rectangle);		}		private function volumeSliderUp(e:MouseEvent):void{			var targetObject:Object = e.currentTarget;			targetObject.buttonMode = true;			targetObject.stopDrag();			setVolumeBar();			trace("volumeSliderUp");		}				/*private function mouseLeave(e:Event) :void {			var targetObject:Object = e.currentTarget;			targetObject.buttonMode = true;			targetObject.stopDrag();			setVolumeBar();		}*/				//stage.addEventListener(Event.MOUSE_LEAVE, mouseLeave);		private function mouseLeave(e:Event):void{			var targetObject:Object = e.currentTarget;		    	endDrag(new MouseEvent("MOUSE_LEAVE"));		    	trace("mouseLeave");		}				public function endDrag(e:MouseEvent):void{			var targetObject:Object = e.currentTarget;			targetObject.buttonMode = true;			targetObject.stopDrag();			setVolumeBar();			trace("endDrag");		}						//•••≈------------Create rectangle using Shape		private function createRectangle(rX:Number, rY:Number, rW:Number, rH:Number){			//rectangle = new Shape(); // Create an instance of the Shape class called "rectangle". 						/*rectangle.graphics.beginFill(0x0099CC, 1);			rectangle.graphics.lineStyle(1, 0x000000);			rectangle.graphics.drawRect(rX, rY, rW, rH);//, 150, 30,60);			rectangle.graphics.endFill();			//this.targetVideoContainer.			addChild(rectangle); */		}				private function setVolume(vol:Number):void {			var volumeTransform:SoundTransform = new SoundTransform();				volumeTransform.volume = vol;//event.value;				stream.soundTransform = volumeTransform;        }		//•••≈----------------------------------------------------------------------------•••≈||: Controlling Video Playback		/*this.targetVideoContainer.playbackVideoBar		this.targetVideoContainer.playbackVideoBarBG		.bufferLength*/		/*var bLoaded:Number = Math.round(stream.bytesLoaded/1000);		var bTotal:Number = Math.round(stream.bytesTotal/1000);		var loadedPerc:Number = Math.round(bLoaded/bTotal*100);		//trace("loadedPerc: " + loadedPerc);*/				private function videoLoadedPercentage(e:Event):void{			var bLoaded:Number = Math.round(stream.bytesLoaded/1000);			var bTotal:Number = Math.round(stream.bytesTotal/1000);			var loadedPerc:Number = Math.round(bLoaded/bTotal*100);			//trace("loadedPerc: " + loadedPerc);			nPercent = Math.round(100 * stream.time/nDuration);			this.targetVideoContainer.videoWindow.playbackVideoBar.scaleX = nPercent/100;//*/			//trace("nPercent: " + nPercent)		}				private function videoBarSeek(e:MouseEvent):void {			var targetObject:Object = e.currentTarget;			targetObject.buttonMode = true;			var xMousePos:Number = Math.round(targetObject.mouseX/targetObject.width * 100);///100;			//trace("xMousePos: " + xMousePos);			nPercent = xMousePos * 100;			//stream.seek(nPercent /60);//nDuration			//stream.seek(nPercent/nDuration);			var barPos:Number = Math.round(nDuration * xMousePos)/100;			//trace("barPos: " + barPos)			stream.seek(barPos);		}				//•••≈----------------------------------------------------------------------------•••≈||: Play/Pause Video				public function onVidPlayPauseOver(e:MouseEvent):void {			var targetObject:Object = e.currentTarget;			targetObject.buttonMode = true;			targetObject.alpha = .25;		}		/*private function onVidPlayPauseOut(e:MouseEvent):void {			var targetObject:Object = e.currentTarget;			targetObject.buttonMode = true;			targetObject.alpha = .5;		}*/		public function onVidPlayPauseOut(e:MouseEvent):void {			var targetObject:Object = e.currentTarget;			targetObject.buttonMode = true;			//this.vidIndexNum = this.aVideoButtons.indexOf(e.currentTarget);			this.vidIndexNum = this.aVideoSelectBtns.indexOf(targetObject);			//aVideoButtons[vidIndexNum].alpha = .25;			if(this.aVideoSelectBtns[this.vidIndexNum].bVideoPlayed == true){				targetObject.alpha = .25;			} else {				targetObject.alpha = 1;			}		}		public function publicTogglePlayPauseVideo ():void {			//bToggleVideoPausePlay = !bToggleVideoPausePlay;			//trace("bToggleVideoPausePlay: " + bToggleVideoPausePlay);			if (bToggleVideoPausePlay == true) {				stream.pause ();				this.targetVideoContainer.videoWindow.playPauseBtn_mc.playBtn_mc.visible = true;				this.targetVideoContainer.videoWindow.playPauseBtn_mc.pauseBtn_mc.visible = false;			} else {				stream.resume ();				this.targetVideoContainer.videoWindow.playPauseBtn_mc.playBtn_mc.visible = false;				this.targetVideoContainer.videoWindow.playPauseBtn_mc.pauseBtn_mc.visible = true;			}		}		public function pauseVideo ():void {			stream.pause ();			this.targetVideoContainer.videoWindow.playPauseBtn_mc.playBtn_mc.visible = true;			this.targetVideoContainer.videoWindow.playPauseBtn_mc.pauseBtn_mc.visible = false;						/*if (bToggleVideoPausePlay == true) {				//stream.pause ();				this.targetVideoContainer.playPauseBtn_mc.playBtn_mc.visible = true;				this.targetVideoContainer.playPauseBtn_mc.pauseBtn_mc.visible = false;			} else {				//stream.resume ();				this.targetVideoContainer.playPauseBtn_mc.playBtn_mc.visible = false;				this.targetVideoContainer.playPauseBtn_mc.pauseBtn_mc.visible = true;			}*/			/*this.targetVideoContainer.playPauseBtn_mc.playBtn_mc.visible = false;			this.targetVideoContainer.playPauseBtn_mc.pauseBtn_mc.visible = true;*/						bToggleVideoPausePlay = true;						/*//bToggleVideoPausePlay = !bToggleVideoPausePlay;			//trace("bToggleVideoPausePlay: " + bToggleVideoPausePlay);			if (bToggleVideoPausePlay == true) {				stream.pause ();				this.targetVideoContainer.playPauseBtn_mc.playBtn_mc.visible = true;				this.targetVideoContainer.playPauseBtn_mc.pauseBtn_mc.visible = false;			} else {				stream.resume ();				this.targetVideoContainer.playPauseBtn_mc.playBtn_mc.visible = false;				this.targetVideoContainer.playPauseBtn_mc.pauseBtn_mc.visible = true;			}*/		}				public function resumeVideo ():void {			stream.resume ();			this.targetVideoContainer.videoWindow.playPauseBtn_mc.playBtn_mc.visible = false;			this.targetVideoContainer.videoWindow.playPauseBtn_mc.pauseBtn_mc.visible = true;			bToggleVideoPausePlay = false;		}				private function togglePlayPauseVideo (e:MouseEvent):void {			var targetObject:Object = e.currentTarget;			targetObject.buttonMode = true;			bToggleVideoPausePlay = !bToggleVideoPausePlay;			if (bToggleVideoPausePlay == true) {				stream.pause ();				targetObject.playBtn_mc.visible = true;				targetObject.pauseBtn_mc.visible = false;			} else {				stream.resume ();				targetObject.playBtn_mc.visible = false;				targetObject.pauseBtn_mc.visible = true;			}		}				private function startVideoTimer(e:Event):void{			var ns_seconds:Number = stream.time;			trace ("ns_seconds: " + ns_seconds);			var targetObject:Object = e.currentTarget;			targetObject.timeDisplay.text = ns_seconds		}				public function litenCloseButn(e:MouseEvent):void {			var targetObject:Object = e.currentTarget;			targetObject.buttonMode = true;			targetObject.alpha = .5;		}		public function drkenCloseButn(e:MouseEvent):void {			var targetObject:Object = e.currentTarget;			targetObject.buttonMode = true;			targetObject.alpha = 1;		}		/*private function stopVideoTimer(e:Event):void{			var ns_seconds:Number = stream.time;			trace ("ns_seconds: " + ns_seconds);		}*/	}}