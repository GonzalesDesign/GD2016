/* SLIDER EFFECTS CLASS:Date: June 1, 2010What's for: The idea is to create a re-usable effect Class for sliding menu buttons. Parameters used:	myMainSliderContainer:MovieClip: Main container. Attached mc.	btnContainerSprite:Sprite: A Sprite to hold all buttons also acts as the panorama iamge	containerSize:Number: Total width or height of the container holding the content to scroll	bSliderOn:Boolean: A boolean trigger	edgeIndentSpace:Number: Slider panorama left and right indentation in relation to its mask	sliderBtnsMask:MovieClip: Slider panorama mask Attached mc.	sliderButtonContainer:MovieClip: This attached mc holds the panorama slider button and its base rectangle*/package {	//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: Slider Imports	import flash.display.Sprite;	import flash.display.MovieClip;	import flash.events.*;		//•••≈---------------------------------------------------------•••≈||: Stage	import flash.events.FullScreenEvent;	import flash.display.Stage;	import flash.display.StageDisplayState;	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.display.DisplayObject;	import flash.events.MouseEvent;	import flash.geom.Rectangle;	//•••≈---------------------------------------------------------•••≈||: Tweener	import caurina.transitions.Tweener;	//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: SLIDER CLASS	public class SliderEffectsSubClassHV extends MovieClip {		//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: SLIDER VARS		//		//•••≈------------------------------------------------------------•••≈||: LoadImage2: This Class has a 3rd parameter for displaying progress anim movieclip. The progress anim is being animated locally (FLA) from where's it's being called.		private var myVideoButtonIcon:LoadImage2;		//private var sTHUMBRES_PATH:String = "../NYC_Motorshow2009/Media/ThumbRes/";		//private var aVideoIcons:Array = new Array("nycMotorshow-2.jpg", "nycMotorshow-10.jpg", "nycMotorshow-27.jpg", "nycMotorshow-37.jpg",  "nycMotorshow-59.jpg", "nycMotorshow-2.jpg", "nycMotorshow-10.jpg", "nycMotorshow-27.jpg", "nycMotorshow-37.jpg",  "nycMotorshow-59.jpg");		//•••≈------------------------------------------------------------•••≈||: btnContainerSprite: New Sprite to hold the button(s) duplicated or not.		private var btnContainerSprite:Sprite = new Sprite();		private var btnContainerPos:Number;		//•••≈------------------------------------------------------------•••≈||: panoSliderSprite: New Sprite to hold the new Rectangle.		//private var panoSliderSprite:Sprite = new Sprite();		//•••≈------------------------------------------------------------•••≈||: containerSize: Total width value of all the button(s) for video selection.		private var containerSize:Number;		//•••≈------------------------------------------------------------•••≈||: sliderBtnsMask: Mask for sliding buttons		private var sliderBtnsMask:MovieClip;		//•••≈------------------------------------------------------------•••≈||: Attached mc that holds the panorama slider button and its base rectangle		//private var sliderButtonContainer:MovieClip;		//•••≈------------------------------------------------------------•••≈||: edgeIndentSpace: Left and right indentation between the pano images and the rectangle mouse bound		private var edgeIndentSpace:Number;		private var zP:Number;				private var div:Number		private var zMouse:Number		private var nButtonWidthNSpace:int;// = 100;				private var sliderButtonContainer:MovieClip;				private var sliderHeight:Number;		private var sliderWidth:Number		//•••≈------------------------------------------------------------•••≈||: bSliderOn: Boolean to trigger slider when mouse is over or out the slider bound.		//private var bSliderOn:Boolean;// = true;//false;		//•••≈------------------------------------------------------------•••≈||: nXMouseLeavingSlidrBound: Captured mouseX position upon leaving the slider bound rectangle.		private var nXMouseLeavingSlidrBound:Number;		//•••≈------------------------------------------------------------•••≈||: aBtnCount: How many button(s) to process. To be changed with xml value lebgth. For testing!		private var aBtnCount:Array = new Array(10);		//•••≈------------------------------------------------------------•••≈||: myMainSliderContainer: Movieclip attached from the FLA layout file. containerBG is the exported mc.		private var myMainSliderContainer:containerBG = new containerBG();		//private var myPanoramaSlider:sliderButtonContainer = new sliderButtonContainer();		//private var mySquareOutline:squareOutline = new squareOutline();		//•••≈------------------------------------------------------------•••≈||: mySquare: Button. squareMC the exported mc.		private var mySquare:squareMC;		private var myTestSquare:squareMC = new squareMC();				private var horizontalScroll:String;		private var verticalScroll:String;		private var scrollType:String;		//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: SLIDER CONSTRUCTOR		public function SliderEffectsSubClassHV (												 btnContainerSprite:Sprite, 												 containerSize:Number, 												 edgeIndentSpace:Number, 												 sliderBtnsMask:MovieClip, 												 sliderButtonContainer:MovieClip												 ){						this.btnContainerSprite = btnContainerSprite;			this.containerSize = containerSize;			this.sliderButtonContainer = sliderButtonContainer;			this.edgeIndentSpace = edgeIndentSpace;			this.sliderBtnsMask = sliderBtnsMask;			this.sliderButtonContainer = sliderButtonContainer; //Check this line			//this.myMainSliderContainer = myMainSliderContainer;			//addChild(myMainSliderContainer);			//•••≈------------------------------------------------------------•••≈||: TEMP myMainSliderContainer positions.			//myMainSliderContainer.x = stage.stageWidth/2;			//myMainSliderContainer.y = stage.stageHeight/2;			//•••≈------------------------------------------------------------•••≈||: Adding btnContainerSprite as a child of myMainSliderContainer			//myMainSliderContainer. addChild(this.btnContainerSprite);			//myMainSliderContainer. addChild(myTestSquare);			//•••≈------------------------------------------------------------•••≈||: initSlider: Method call			initSlider();		}		//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: SLIDER METHODS		//•••≈--------------------------------------------------------------------------------------------------------------------------------------------------------•••≈||:		//••••••••••••••••••••••••••••••••••••≈----------------:|     SLIDER SECTION     |:----------------≈••••••••••••••••••••••••••••••••••••:|•		//•••≈--------------------------------------------------------------------------------------------------------------------------------------------------------•••≈||:		public function initSlider():void{			trace("•••-----------------------------------------||: start initSliderFXClass")			//var spacesDivider:Number = 20;			//this.edgeIndentSpace = edgeIndentSpace/100;			//this.containerSize = containerSize;			//trace("this.containerSize: " + this.containerSize);			//sliderBtnsMask			//•••≈------------------------------------------------------------•••≈||: Masking the btnContainerSprite						this.btnContainerSprite.mask = this.sliderBtnsMask;			//•••≈------------------------------------------------------------•••≈||: Initial container vertical position			//this.btnContainerSprite.y = -(this.sliderBtnsMask.height);			//•••≈------------------------------------------------------------•••≈||: Positioning the Mask			//this.sliderBtnsMask.x = myMainSliderContainer.sliderBound.x;			//this.sliderBtnsMask.y = myMainSliderContainer.sliderBound.y;// + 10;			//this.sliderBtnsMask.mask = this.btnContainerSprite;						//trace("this.btnContainerSpriteWidthSFXClass: " + this.btnContainerSprite.width)			//panoramaWidth = this.btnContainerSprite.width			//•••≈------------------------------------------------------------•••≈||: Add the following codes inside the calling AS			//trace("aBtnCount.length: " + aBtnCount.length);			/*var nVideoCount:int = aVideoIcons.length;			for(var iVc:int = 0; iVc<nVideoCount; iVc++){				//•••≈------------------------------------------------------------•••≈||: Create new button(s).				mySquare = new squareMC();				mySquare.x = nButtonWidthNSpace * iVc;				//•••≈------------------------------------------------------------•••≈||: Math.random is Temp				mySquare.y = Math.random() * 12;				btnContainerSprite.addChild(mySquare);				containerSize = btnContainerSprite.width - (nButtonWidthNSpace/2);				btnContainerSprite.x = -((myMainSliderContainer.sliderBound.width/2) - mySquare.width);				//myThumbLoader = new LoadImage2(myThumb.thumbImgFPO, sTHUMBRES_PATH+aImages[jj]);				myVideoButtonIcon =  new LoadImage2(mySquare.videoIconImg, sTHUMBRES_PATH+aVideoIcons[iVc], mySquare.loadingAnim);			}*/			/*myMainSliderContainer.sliderBound.addEventListener(MouseEvent.MOUSE_OVER, followMouseXPos);			myMainSliderContainer.sliderBound.addEventListener(MouseEvent.MOUSE_OUT, sliderBoundMouseOut);*/		//myMainSliderContainer.sliderPanoramaButton.x = myMainSliderContainer.volumeControl.volumeSoundBar.width		//myMainSliderContainer.sliderPanoramaButton.addEventListener (MouseEvent.MOUSE_DOWN, panoSliderStartDrag);	//		myMainSliderContainer.sliderPanoramaButton.addEventListener (MouseEvent.MOUSE_UP, panoSliderStopDrag);					//followMouse();						//sliderBtnPosition();						sliderHeight = this.sliderButtonContainer.height;			sliderWidth = this.sliderButtonContainer.width;						//•••≈------------------------------•••≈||: Initial slider button position			//sliderYPosition();		}					public function sliderYPosition():void{			this.sliderButtonContainer.vertSliderButton.y = 100;			this.btnContainerSprite.y = this.sliderButtonContainer.vertSliderButton.y;			//trace()		}				//•••≈------------------------------------------------•••≈||: Video Sliding Btn startDrag and stopDrag 		public function panoSliderStartDrag(e:MouseEvent):void{			var targetObject:Object = e.currentTarget;			targetObject.buttonMode = true;			targetObject.startDrag();			//trace("targetObject: "+ targetObject);			//trace("targetObject");			/*var panoSliderSprite.rectangle:Rectangle = new Rectangle(0, 0, 500, 1)//(myMainSliderContainer.sliderBound.x, myMainSliderContainer.sliderBound.y, 320, 2);			targetObject.startDrag();//(true, rectangle);			myMainSliderContainer.addChild(panoSliderSprite);*/			/*var target1:Sprite = new Sprite();			target1.graphics.beginFill(0xCCFF00);			target1.graphics.drawRect(0, 0, 100, 100);			target1.name = "target1";			//myMainSliderContainer.			addChild(target1);			//slidePanorama();*/		}		/*public function panoSliderStopDrag(e:MouseEvent):void{			var targetObject:Object = e.currentTarget;			targetObject.buttonMode = true;			targetObject.stopDrag();			zP = nXMouseLeavingSlidrBound;			trace("zP: " + zP);		}*/		//•••≈------------------------------------------------•••≈||: slidePanorama: Captures the input (mouseX calculation) positions and used it for the buttons position		/*public function slidePanorama():void {			//trace("this.scrollType: " + this.scrollType);			if(this.scrollType == horizontalScroll){								div = ((this.containerSize - this.sliderButtonContainer.width) / this.sliderButtonContainer.width) + this.edgeIndentSpace;				zMouse = Math.round(this.sliderButtonContainer.mouseX) * div;				zP = (zMouse+(this.containerSize/2));				Tweener.addTween (this.btnContainerSprite,{x:(-zP), time:4,transition:"easeOutExpo"});						} else {								div = ((this.containerSize - this.sliderButtonContainer.height) / this.sliderButtonContainer.height) + this.edgeIndentSpace;				zMouse = Math.round(this.sliderButtonContainer.mouseY) * div;				zP = (zMouse+(this.containerSize/2));				Tweener.addTween (this.btnContainerSprite,{x:(-zP), time:4,transition:"easeOutExpo"});							}		}*/		public function horizontalSlider():void{			//sliderWidth = this.sliderButtonContainer.width;// - this.edgeIndentSpace;			div = ((this.containerSize - sliderWidth) / sliderWidth);// + this.edgeIndentSpace;			/*zMouse = Math.round(this.sliderButtonContainer.mouseX) * div;			zP = (zMouse+(this.containerSize/2));*/			//•••≈------------------------------------------------•••≈||: Slider condition, when button x position is less than zero, apply edgeIndentSpace to better center the panel in relation with the slider bar.			if(this.sliderButtonContainer.mouseX <= 0){//(sliderHeight/2)){				zMouse = ((this.sliderButtonContainer.mouseX) * div) - this.edgeIndentSpace;				trace("•••--------------------||: this.sliderButtonContainer.mouseX1: " + this.sliderButtonContainer.mouseX);			} else {				zMouse = (this.sliderButtonContainer.mouseX) * div;				trace("•••--------------------||: this.sliderButtonContainer.mouseX2: " + this.sliderButtonContainer.mouseX);			}						//zMouse = (this.sliderButtonContainer.mouseX) * div;			zP = Math.round((zMouse+(this.containerSize/2)));						Tweener.addTween (this.btnContainerSprite,{x:(-zP), time:4,transition:"easeOutExpo"});			//trace("this.btnContainerSprite.x: " + this.btnContainerSprite.x);			//trace("this.btnContainerSprite.y: " + this.btnContainerSprite.y);			//trace("this.sliderButtonContainer.width: " + this.sliderButtonContainer.width);			//trace("this.containerSize: " + this.containerSize)		}				/*div = ((this.panoWidth - this.sliderButtonContainer.width) / this.sliderButtonContainer.width) + this.leftRightSpace;			xMouse = Math.round(this.sliderButtonContainer.mouseX) * div;			xP = (xMouse+(this.panoWidth/2));			Tweener.addTween (this.btnContainerSprite,{x:(-xP), time:4,transition:"easeOutExpo"});*/					//•••≈------------------------------•••≈||: Call in Main Class. Call made from dragging slider button and release		public function verticalSlide():void{						//sliderHeight = this.sliderButtonContainer.height// + 84// - this.edgeIndentSpace;						//div = ((this.containerSize - sliderHeight) / sliderHeight);// + this.edgeIndentSpace;			/*			div = (this.containerSize / sliderHeight);			//zMouse = Math.round(this.sliderButtonContainer.mouseY) * div;			//•••≈------------------------------------------------•••≈||: Slider condition, when button y position is less than zero, apply edgeIndentSpace to better center the panel in relation with the slider bar.			//if(this.sliderButtonContainer.mouseY <= 0){//(sliderHeight/2)){//				zMouse = ((this.sliderButtonContainer.mouseY) * div) - this.edgeIndentSpace;//				trace("this.sliderButtonContainer.mouseY1: " + this.sliderButtonContainer.mouseY);//			} else {//				zMouse = (this.sliderButtonContainer.mouseY) * div;//				trace("this.sliderButtonContainer.mouseY2: " + this.sliderButtonContainer.mouseY);//			}						zMouse = Math.round(this.sliderButtonContainer.vertSliderButton.y * div);//(this.sliderButtonContainer.mouseY) * div;			//zP = zMouse;			//zP = Math.round((zMouse+(this.containerSize/2)));									Tweener.addTween (this.btnContainerSprite,{y:(-zMouse), time:4,transition:"easeOutExpo"});						//sliderBtnPosition();									btnContainerPos = zMouse;*/									trace("//•••≈------------------------------•••≈||: verticalSlide: start");			//•••≈------------------------------------------------•••≈||: Container vertical position in response to the button relative position.			var contSize:Number = sliderHeight;//this.btnContainerSprite.height - sliderHeight;//this.sliderBtnsMask.height;			var contVertPosPercntge:Number = Math.round(100 * this.sliderButtonContainer.vertSliderButton.y/sliderHeight)/100;			var contVertPos:Number = contSize * contVertPosPercntge;			Tweener.addTween (this.btnContainerSprite,{y:(- contVertPos), time:4,transition:"easeOutExpo"});						/*var btnVertPosPercntge:Number = Math.round(100 * this.sliderButtonContainer.vertSliderButton.y/sliderHeight)/100;			var btnVertPos:Number = sliderHeight * btnVertPosPercntge ;//contSize/someNum1a;			Tweener.addTween (this.sliderButtonContainer.vertSliderButton,{y:(btnVertPos), time:4,transition:"easeOutExpo"});*/						trace("containerVertPosPercntge: " + contVertPosPercntge);			trace("contVertPos: " + contVertPos);			/*trace("btnVertPosPercntge: " + btnVertPosPercntge);			trace("btnVertPos: " + btnVertPos);*/									/*//trace("thumbContainerHeight - Vertical Slider Mask Height = " + contSize)			trace("contSize: " + contSize);			//var someNum1:Number = Math.round(100 * this.sliderButtonContainer.mouseY/sliderHeight)/100;						trace("sliderHeight: " + sliderHeight);			trace("vertPosPercntge: percentage: 100* slider button y / sliderHeight " + vertPosPercntge);						//this.sliderButtonContainer.vertSliderButton.y = sliderHeight * someNum2;						//trace("this.sliderButtonContainer.vertSliderButton.y2 : " + this.sliderButtonContainer.vertSliderButton.y);									//this.sliderButtonContainer.vertSliderButton.y = sliderHeight * vertPosPercntge;									trace("someNum1a: " + someNum1a);									trace("someNum1b: this.btnContainerSprite/someNum1: " + someNum1b);						//Tweener.addTween (this.sliderButtonContainer.vertSliderButton,{y:(- someNum1b), time:4,transition:"easeOutExpo"});												//trace("div : " + div);			//trace("zMouse : " + zMouse);			trace("this.sliderButtonContainer.vertSliderButton.y : " + this.sliderButtonContainer.vertSliderButton.y);			trace("this.btnContainerSprite.y :" + this.btnContainerSprite.y);			//trace("btnContainerPos : " + btnContainerPos);*/							/*trace("this.sliderButtonContainer.mouseY: " + this.sliderButtonContainer.mouseY);				trace("sliderHeight: " + sliderHeight);				trace("this.containerSize: " + this.containerSize);				trace("this.sliderButtonContainer.height: " + this.sliderButtonContainer.height);				//trace("div : " + div);				//trace("zMouse.Math.round: " + Math.round(zMouse));				//trace("zMouse.noMath.round: " + zMouse);				//trace("zP: " + zP);				trace("this.btnContainerSprite.y :" + this.btnContainerSprite.y);	*/									trace("•••≈------------------------------•••≈||: verticalSlide: end");		}				//•••≈------------------------------•••≈||: Call in Main Class. Call made from clicking on the vertDragSliderBar		public function verticalSliderOnClick():void{			trace("•••≈---------------------•••≈||: start verticalSliderOnClick");			//div = (this.containerSize / sliderHeight);			zMouse = Math.round(this.sliderButtonContainer.mouseY);// * div;			//trace("div: " + div);			trace("this.btnContainerSprite.height: " + this.btnContainerSprite.height);			trace("sliderHeight: " + sliderHeight);//vertSliderBar Height			trace("zMouse: " + zMouse);			this.sliderButtonContainer.vertSliderButton.y = zMouse;									var contSize:Number = sliderHeight;//this.btnContainerSprite.height - sliderHeight;//this.sliderBtnsMask.height;			var contVertPosPercntge:Number = Math.round(100 * this.sliderButtonContainer.vertSliderButton.y/sliderHeight)/100;			var contVertPos:Number = contSize * contVertPosPercntge;						Tweener.addTween (this.btnContainerSprite,{y:(- contVertPos), time:4,transition:"easeOutExpo"});			trace("this.sliderButtonContainer.vertSliderButton.y: " + this.sliderButtonContainer.vertSliderButton.y);			//Tweener.addTween (this.sliderButtonContainer.vertSliderButton,{y:(zMouse), time:4,transition:"easeOutExpo"});						trace("•••≈---------------------•••≈||: end verticalSliderOnClick");		}						//•••≈------------------------------•••≈||: Call in Main Class: Pop panel		public function sliderBtnPosition():void{						//trace("//•••≈------------------------------•••≈||: sliderBtnPosition: start");			//•••≈------------------------------------------------•••≈||: Slider button vertical position in response to the container relative position.			//var contSize:Number = this.btnContainerSprite.height - sliderHeight;//this.sliderBtnsMask.height;			//trace("this.btnContainerSprite.height: " + this.btnContainerSprite.height);			//trace("this.sliderBtnsMask.height: " + this.sliderBtnsMask.height);						if(this.btnContainerSprite.height < this.sliderBtnsMask.height){				this.sliderButtonContainer.visible = false;			}			var btnVertPosPercntge:Number = Math.round(100 * this.btnContainerSprite.y/this.btnContainerSprite.height)/100;			var btnVertPos:Number = sliderHeight * btnVertPosPercntge;//Math.round(contSize * btnVertPosPercntge);//sliderHeight * btnVertPosPercntge ;//contSize/someNum1a;			Tweener.addTween (this.sliderButtonContainer.vertSliderButton,{y:(- btnVertPos), time:4,transition:"easeOutExpo"});						//trace("btnVertPosPercntge: " + btnVertPosPercntge);			//trace("btnVertPos: " + btnVertPos);			//trace("//•••≈------------------------------•••≈||: sliderBtnPosition: end");						//this.sliderButtonContainer.vertSliderButton.y = 3707/257;//(this.btnContainerSprite.y)/sliderHeight;			/*trace("//•••≈-------------- pop ----------------•••≈||: sliderBtnPosition: start");			var div2:Number;			var zMouse2:Number;						//div2 = Math.round(this.containerSize / sliderHeight);			div2 = (this.containerSize / sliderHeight);			zMouse2 = - (Math.round((this.btnContainerSprite.y/sliderHeight) * div2));*/			//this.sliderButtonContainer.vertSliderButton.y = zMouse2;						//btnContainerPos						//trace("div2 : " + div2);//			trace("zMouse2 : " + zMouse2);//			trace("this.sliderButtonContainer.vertSliderButton.y : " + this.sliderButtonContainer.vertSliderButton.y);//			trace("this.btnContainerSprite.y :" + this.btnContainerSprite.y);//			/*trace("sliderHeight: " + sliderHeight);//			trace("this.containerSize: " + this.containerSize);//			trace("this.btnContainerSprite.y :" + this.btnContainerSprite.y);*///			trace("//≈•••--------------------------------------------------------------------------•••≈||: sliderBtnPosition: end");//			//			trace("//•••≈------------------------•••≈||: sliderBtnPosition: " + this.btnContainerSprite.name + "start");			//var contSize:Number = this.btnContainerSprite.height - this.sliderBtnsMask.height;						//var someNum2:Number = Math.round((100 * (- this.btnContainerSprite.y)/contSize ))/100;			//trace("someNum2Percentage: " + someNum2);			//this.sliderButtonContainer.vertSliderButton.y = sliderHeight * someNum2;			//trace("this.sliderButtonContainer.vertSliderButton.y2 : " + this.sliderButtonContainer.vertSliderButton.y);						/*var someNum3:Number = Math.round(contSize * someNum2);			//Tweener.addTween (this.btnContainerSprite,{y:(- someNum3), time:4,transition:"easeOutExpo"});			Tweener.addTween (this.sliderButtonContainer.vertSliderButton,{y:(- someNum3), time:4,transition:"easeOutExpo"});			trace("someNum3: " + someNum3);*/			//var someNum1:Number = Math.round((100 * this.btnContainerSprite.y/sliderHeight ))/100;			/*						var someNum2:Number = Math.round((100 * (- this.btnContainerSprite.y)/this.btnContainerSprite.height ))/100;			trace("someNum2Percentage: " + someNum2);						this.sliderButtonContainer.vertSliderButton.y = sliderHeight * someNum2;			trace("this.sliderButtonContainer.vertSliderButton.y: " + this.sliderButtonContainer.vertSliderButton.y);						*/			/*//•••------------------------------------------------•••≈:| Volume Control			var volumeMask:Number = Math.round((100 * targetObject.mouseX/targetObject.width ))/100;			this.targetSoundContainer.mp3VolumeBar_mc.mp3VolumeMask.width = volBarMaskWidth * volumeMask			volumeLevel = volumeMask;*/			//trace("//•••≈------------------------•••≈||: sliderBtnPosition: " + this.btnContainerSprite.name + "end");		}				//•••≈------------------------------•••≈||: Call in Main Class: Test for thumbnails only		/*public function vertSliderBtnPosition():void{			var heightDivider:Number = (this.btnContainerSprite.height - 80)/sliderHeight;				thumbVerticalPosition = this.soundIndexNum * this.aDupeList[0].songListNameBG.height;				var sliderBtnYPos:int = Math.round(songVerticalPosition / heightDivider);///this.verticalSlider.height);//this.aDupeList[0].songListNameBG.height);				Tweener.addTween (this.verticalSlider.vertSliderButton,{y:sliderBtnYPos, time:2,transition:"easeOutQuad"});		}*/		/*public function followMouse():void{			trace("followMouse: " + followMouse);			//trace("myMainSliderContainer.sliderBound");			myMainSliderContainer.sliderBound.addEventListener(MouseEvent.MOUSE_DOWN, panoSliderStartDrag);//TEST!!!!			//myMainSliderContainer.sliderBound.addEventListener(MouseEvent.MOUSE_OVER, followMouseXPos);			//myMainSliderContainer.sliderBound.addEventListener(MouseEvent.MOUSE_OUT, sliderBoundMouseOut);			//myMainSliderContainer.sliderBound.addEventListener(Event.ENTER_FRAME, slideMe);						//trace("myMainSliderContainer.sliderPanoramaButton");			//myMainSliderContainer.sliderPanoramaButton.addEventListener (MouseEvent.MOUSE_DOWN, panoSliderStartDrag);	//The sliderPanoramaButton isn't working for some reason.			//myMainSliderContainer.sliderPanoramaButton.addEventListener (MouseEvent.MOUSE_UP, panoSliderStopDrag);			//trace("myMainSliderContainer.sliderPanoramaButton2");		}*/		//•••≈------------------------------------------------------------•••≈||: followMouseXPos: Method for mouse event over sliding bound area.		/*public function followMouseXPos(e:MouseEvent):void{			var targetObject:Object  = e.currentTarget;			targetObject.buttonMode = true;			this.bSliderOn = true;			//trace("bSliderOn1: " + bSliderOn)			//targetObject.addEventListener(Event.ENTER_FRAME, slideMe);			//trace("Mouse is over bound")			//trace("containerSizeSFXClass1: " + this.containerSize);			//trace("this.btnContainerSpriteWidthSFXClass: " + this.btnContainerSprite.width)			//panoramaWidth = this.btnContainerSprite.width		}*/		//•••≈------------------------------------------------------------•••≈||: slideMe: enterFrame  event called when mouse is over sliding bound area.		/*private function slideMe(e:Event):void{			var targetObject:Object  = e.currentTarget;			targetObject.buttonMode = true;						if(this.bSliderOn == true){				div = ((this.containerSize - myMainSliderContainer.sliderBound.width) / myMainSliderContainer.sliderBound.width) + this.edgeIndentSpace;				//trace("div: " + div);				zMouse = Math.round(targetObject.mouseX) * this.edgeIndentSpace;// * div;				//trace("zMouse: " + zMouse);				zP = (zMouse+(this.containerSize/2));				//trace("zP: " + zP);				Tweener.addTween (this.btnContainerSprite,{x:(-zP), time:6,transition:"easeOutExpo"});				//trace("this.btnContainerSprite.x: " + this.btnContainerSprite.x);				//trace("//•••≈------------------------------------------------------------•••≈||");				} else {					zP = nXMouseLeavingSlidrBound;			}		}*/		//private function slideMe(e:Event):void{//			var targetObject:Object  = e.currentTarget;//			targetObject.buttonMode = true;//			////			//trace("slideMe EnterFrame");//			/*div = ((containerSize - myMainSliderContainer.sliderBound.width) / myMainSliderContainer.sliderBound.width) + edgeIndentSpace;//			trace("div: " + div);//			zMouse = Math.round(myMainSliderContainer.sliderBound.mouseX * div);//			zP = (zMouse+(containerSize/2));//			Tweener.addTween (btnContainerSprite,{x:(-zP), time:6,transition:"easeOutExpo"});*///			//bSliderOn = true;//			//trace("bSliderOnSlidrFXClass: " + bSliderOn);//			//			//this.containerSize = stringToNumber//			//trace("containerSizeSFXClass1: " + this.containerSize);//			//			if(this.bSliderOn == true){//				//var panWide:Number = this.containerSize//				//div = ((this.containerSize - myMainSliderContainer.sliderBound.width) / myMainSliderContainer.sliderBound.width) + this.edgeIndentSpace;//40/100;//this.edgeIndentSpace;//				//trace("containerSizeSFXClass1: " + this.containerSize);//				div = ((this.containerSize - myMainSliderContainer.sliderBound.width) / myMainSliderContainer.sliderBound.width) + this.edgeIndentSpace;//				//div = ((panoramaWidth - myMainSliderContainer.sliderBound.width) / myMainSliderContainer.sliderBound.width) + this.edgeIndentSpace;//				//					//trace("panWideSFXClass: " + panWide);//					//trace("edgeIndentSpaceSFXClass: " + this.edgeIndentSpace);//					//trace("containerSizeSFXClass: " + this.containerSize);//					//trace("this.btnContainerSpriteWidthSFXClass: " + this.btnContainerSprite.width)//					//trace("divSFXClass: " + div);//				//zMouse = Math.round(myMainSliderContainer.sliderBound.mouseX * div);//				zMouse = Math.round(targetObject.mouseX) * div;//				//					//trace("zMouse: " + zMouse);//				zP = (zMouse+(this.containerSize/2));//				//zP = ((zMouse - (targetObject.x)) +(containerSize/2));// * div;//				Tweener.addTween (this.btnContainerSprite,{x:(-zP), time:6,transition:"easeOutExpo"});//				trace("this.btnContainerSprite.x: " + this.btnContainerSprite.x);//				} else {//					zP = nXMouseLeavingSlidrBound;//			}//		}		//•••≈------------------------------------------------------------•••≈||: sliderBoundMouseOut: Reads mouse x position when going out of the sliding area		/*public function sliderBoundMouseOut(e:MouseEvent):void{			var targetObject:Object  = e.currentTarget;			targetObject.buttonMode = true;			//trace("targetObject.mouseX: " + targetObject.mouseX);			this.bSliderOn = false;			nXMouseLeavingSlidrBound = targetObject.mouseX;		}*/	}}