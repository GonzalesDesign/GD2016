package {	import flash.display.MovieClip;	//	import flash.display.StageAlign;	import flash.display.StageScaleMode;	import flash.display.DisplayObject;	//	import flash.display.Graphics;	import flash.display.Loader;	import flash.net.URLRequest;	import flash.net.URLLoader;	import flash.display.Bitmap;	import flash.display.BitmapData;	//import flash.net.URLRequest;	import flash.events.ProgressEvent;	import flash.events.Event;	import flash.events.MouseEvent;	import flash.events.IOErrorEvent;	import flash.events.ErrorEvent;	import flash.errors.IOError;	//•••------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------•••≈||: CLASS	public class LoadImage2 extends MovieClip {		//•••------------------------------------------------------------------•••≈||: PROPERTIES: LOADERS & BITMAPS		private var imageLoader:Loader;		private var imgBM:Bitmap;				//•••------------------------------------------------------------------•••≈||: PROPERTIES: MOVIECLIPS • OBJECTS				private var targetObject:Object;				private var targetMC:MovieClip;		private var imgBMWidth:Number;		private var imgXPos:Number;		//•••------------------------------------------------------------------•••≈||: PROPERTIES: STRING		private var targetURL:String;				private var progressAnim:MovieClip;		//•••--------------------------------------------------------------------------------------------------------------------------------------------------------------------------•••≈||: CONSTRUCTOR		public function LoadImage2(targetMC:MovieClip, targetURL:String, progressAnim:MovieClip){			this.targetMC = targetMC;			this.targetURL = targetURL;			this.progressAnim = progressAnim;			this.imgXPos = imgXPos;			loadMe();					}				//•••------------------------------------------------------------------•••≈||: METHODS		private function loadMe():void{			imageLoader = new Loader();			var urlRekws:URLRequest = new URLRequest(this.targetURL);//aImgName[i]);			imageLoader.load(urlRekws);			this.targetMC.addChild(imageLoader);			//trace("imageLoader: " + imageLoader);			imageLoader.contentLoaderInfo.addEventListener(ProgressEvent.PROGRESS,onProgress);			imageLoader.contentLoaderInfo.addEventListener(Event.COMPLETE, OnComplete);			imageLoader.addEventListener(MouseEvent.ROLL_OVER, onOver);			//trace("LoadImage2: targetMC.numChildren: " + targetMC.numChildren); 			cleanImageContainer (this.targetMC)		}				private function onProgress(e:ProgressEvent):void {			//trace("onProgress")			progressAnim.visible = true;		}				private function OnComplete(e:Event):void {						progressAnim.visible = false;			//•••----------------------------------------------------------------•••≈||: New BitmapData: Current Image			imgBM = Bitmap(e.target.content);//e.target.content);			var imgBMData:BitmapData = imgBM.bitmapData;			imgBM.smoothing = true;						imgBM.x = - imgBM.width/2;//imgXPos;			imgBM.y = - imgBM.height/2;			//imgBMWidth = imgBM.width			//testImgWidth();		}		//•••≈-------------------------------------------------------------------------------------------------------------------•••≈||: Clean container		private function cleanImageContainer (imgHolder:MovieClip):void {			if (imgHolder.numChildren > 2) {				imgHolder.removeChildAt (1);			}		}				private function onOver(e:MouseEvent):void{			var targetObj:Object = e.currentTarget			//targetObj.buttonMode = true;			if(targetObj.hitTestPoint(this.mouseX, this.mouseY, true)){				//trace("Test from LoadImage2: you got me!")			} 		}				public function testImgWidth():void{			//trace("this.targetMC.width from LoadImage2: " + imgBMWidth);			//return "this.targetMC.width" + this.targetMC.width;						//this.targetMC.width = imgBMWidth;			//trace("this.targetMC.width from LoadImage2: " + imgBMWidth);			var mcWidth:Number = imgBM.width					}		public function removeImage(imgHolder:MovieClip, indx:int):void{			imgHolder.removeChildAt (indx);		}	}}